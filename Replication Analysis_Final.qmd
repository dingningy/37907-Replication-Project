---
title: "Replication Analysis"
author: "Dingning Yang"
format: 
 html:
    toc: true
    toc-depth: 3
    toc-title: "Table of Contents"
    number-sections: true
    highlight-style: github
    theme: cosmo
    fontsize: 1.25em
    linestretch: 1.5
---

```{r}
#| label: setup
#| include: false
# Install required packages
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(readr)){install.packages("readr")}
if(!require(knitr)){install.packages("knitr")}
if(!require(broom)){install.packages("broom")}
if(!require(psych)){install.packages("psych")}
if(!require(lmtest)){install.packages("lmtest")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(kableExtra)){install.packages("kableExtra")}
if(!require(effsize)){install.packages("effsize")}


if (!requireNamespace("nnet", quietly = TRUE)) {
  install.packages("nnet")
}
library(nnet)
# List of packages
required_packages <- c("tidyverse", "ggplot2", "readr", "knitr", "broom", "psych", "lmtest", "ggpubr", "kableExtra","effsize")

# Load packages
lapply(required_packages, library, character.only = TRUE)
set.seed(123)

# Install the package if you haven't already
install.packages("effectsize")

# Load the package
library(effectsize)

```

```{r}
#| label: Read Data
#| include: false

# You have to edit the path here to render output without error
raw.replication <- read_csv("C:/Users/yDn/Downloads/replication.raw.csv")


```

# Data Cleaning

```{r}
#| label: Remove unnecessary columns and rows
#| include: false

# Remove unnecessary columns
raw.replication <- raw.replication %>% filter(DistributionChannel != "preview") %>% select(-c(1:7, 10:17, 21:23))

raw.replication <- raw.replication %>% select(-c(6, 8:11, 13:16,18:21))

raw.replication <- raw.replication %>% select(-c(15:18))

# Remove unnecessary rows
raw.replication <- raw.replication %>% slice(-c(1, 2))

```

```{r}
#| label: Retain valid data
#| include: false

# Delete data failed attention check
raw.replication <- raw.replication %>% filter(passedattn == "yes") # This remains 988 valid samples, higher than the target sample size of 963 for the replication purpose

# Reassure the above code retains the correct number of valid samples
unique(raw.replication$passedattn) #only returns "yes"
unique(raw.replication$attention_check) #only returns "4", which is astronomy:)

# Identify if there is duplicated data

duplicate_data <- raw.replication %>%
  filter(duplicated(PROLIFIC_PID) | duplicated(PROLIFIC_PID, fromLast = TRUE))
# It returns an empty data frame, which means there is no duplicated data

```

```{r}
#| label: Dedscriptive analysis
#| include: false

# Female proportion
female_percentage <- sum(raw.replication$gender == 2) / nrow(raw.replication) * 100 # proportion = 56.02%

# Average age
raw.replication$age <- as.numeric(as.character(raw.replication$age))
average_age <- mean(raw.replication$age, na.rm = TRUE) # mean age = 41.46

sd_age <- sd(raw.replication$age, na.rm = TRUE)

```

```{r}
#| label: Data cleaning and transformation
#| include: false

raw.replication <- raw.replication %>% select(-c(1,3:4,14,15,26))

# Change column names
raw.replication <- raw.replication %>% select (`ResponseId`, `topic_modest_donat`, `importance_coop`, `importance_comp`, `topic_1`, `topic_2`, `topic_3`,`modest`, `topic_4`,  everything()) %>% rename (ID = `ResponseId`, modesty = `topic_modest_donat`, mc_coop = `importance_coop`, mc_comp = `importance_comp`, topic_conspicuous = `topic_1`, topic_prosocial = `topic_2`, topic_competence = `topic_3`, domain_modest = `modest`, topic_modest = `topic_4`)

# Relocate the columns
raw.replication <- raw.replication %>% relocate (condition, .after = ID) %>% relocate (topic_conspicuous, .after = condition) %>% relocate (conspicuous, .after = topic_conspicuous) %>% relocate (topic_prosocial, .after = conspicuous) %>% relocate (prosocial, .after = topic_prosocial) %>% relocate (topic_competence, .after = prosocial) %>% relocate (competence, .after = topic_competence) %>% relocate (domain_modest, .after = competence) %>% relocate (topic_modest, .after = domain_modest) %>% relocate (modesty, .after = topic_modest) 


# ID

replication <- raw.replication %>%
  mutate(ID = row_number())




```

# Manipulation Checks

## Cooperation (successful)

```{r}
#| label: Manipulation check for cooperation
#| include: false

# Check means and SDs for each condition
replication$mc_coop <- as.numeric(as.character(replication$mc_coop))


condition_means_coop <- replication %>%
  group_by(condition) %>%
  summarize(mean_check = mean(mc_coop, na.rm = TRUE),
            sd_check = sd(mc_coop, na.rm = TRUE),
            n = n())

print(condition_means_coop)

# Mean (cooperation) = 4.56 (SD = 0.71) vs. Mean (control) = 4.14 (SD = 0.76) vs. Mean (competition) = 3.66 (SD = 1.13)

# ANOVA

anova_coop <- aov(mc_coop ~ condition, data = replication)
summary(anova_coop) # F(986) = 84.54, p < .001, the manipulation is successful

eta_squared(anova_coop)

# Post-hoc test
tukey_coop <- TukeyHSD(anova_coop)
print(tukey_coop) # All pairwise comparisons are significant

# Effect size

# 1. Control vs. Competition
d_control_competition <- cohen.d(mc_coop ~ condition, 
                               data = filter(replication, condition %in% c("control", "competition")))

# 2. Cooperation vs. Competition
d_cooperation_competition <- cohen.d(mc_coop ~ condition, 
                                   data = filter(replication, condition %in% c("cooperation", "competition")))

# 3. Cooperation vs. Control
d_cooperation_control <- cohen.d(mc_coop ~ condition, 
                              data = filter(replication, condition %in% c("cooperation", "control")))

print("Control vs. Competition:")
print(d_control_competition)   # d = -0.49 (small to medium)

print("Cooperation vs. Competition:")
print(d_cooperation_competition) # d = -0.95 (large)

print("Cooperation vs. Control:")
print(d_cooperation_control)    # d = -0.57 (medium)



```

## Competition (successful)

```{r}
#| label: Manipulation check for competition
#| include: false

# Check means and SDs for each condition
replication$mc_comp <- as.numeric(as.character(replication$mc_comp))


condition_means_comp <- replication %>%
  group_by(condition) %>%
  summarize(mean_check = mean(mc_comp, na.rm = TRUE),
            sd_check = sd(mc_comp, na.rm = TRUE),
            n = n())

print(condition_means_comp)

# Mean (competition) = 4.03 (SD = 1.04) vs. Mean (control) = 2.73 (SD = 1.14) vs. Mean (cooperation) = 2.31 (SD = 1.30)

# ANOVA

anova_comp <- aov(mc_comp ~ condition, data = replication)
summary(anova_comp) # F(986) = 194.1, p < .001, the manipulation is successful

eta_squared(anova_comp)

# Post-hoc test
tukey_comp <- TukeyHSD(anova_comp)
print(tukey_comp) # All pairwise comparisons are significant

# Effect size

# 1. Control vs. Competition
d_control_competition_comp <- cohen.d(mc_comp ~ condition, 
                               data = filter(replication, condition %in% c("control", "competition")))

# 2. Cooperation vs. Competition
d_cooperation_competition_comp <- cohen.d(mc_comp ~ condition, 
                                   data = filter(replication, condition %in% c("cooperation", "competition")))

# 3. Cooperation vs. Control
d_cooperation_control_comp <- cohen.d(mc_comp ~ condition, 
                              data = filter(replication, condition %in% c("cooperation", "control")))

print("Control vs. Competition:")
print(d_control_competition_comp)   # d = 1.19 (large)

print("Cooperation vs. Competition:")
print(d_cooperation_competition_comp) # d = 1.45 (large)

print("Cooperation vs. Control:")
print(d_cooperation_control_comp)    # d = 0.34 (small)



```

# Hypothesis Testing

## Main effect (replication): Cooperation vs. control (conspicuous)

```{r}
#| label: Main effect (replication): Cooperation vs. control (conspicuous)
#| include: false

control_cooperation <- replication %>%
  filter(condition %in% c("control", "cooperation"))

# Recode condition for control vs. cooperation dataset
control_cooperation <- control_cooperation %>%
  mutate(condition_coded = case_when(
    condition == "cooperation" ~ 1,
    condition == "control" ~ -1
  ))

control_cooperation <- control_cooperation %>% relocate (condition_coded, .after = condition)

# Function to apply effects coding for topics
apply_topic_coding_conspicuous <- function(df) {
  # Create effects coding for topics following the specified coding scheme
  df <- df %>%
    mutate(
      V1_conspicuous = case_when(
        topic_conspicuous == "attire" ~ -1,
        topic_conspicuous == "food" ~ 1,
        topic_conspicuous == "car" ~ 0,
        topic_conspicuous == "travel" ~ 0
      ),
      V2_conspicuous = case_when(
        topic_conspicuous == "attire" ~ -1,
        topic_conspicuous == "food" ~ 0,
        topic_conspicuous == "car" ~ 1,
        topic_conspicuous == "travel" ~ 0
      ),
      V3_conspicuous = case_when(
        topic_conspicuous == "attire" ~ -1,
        topic_conspicuous == "food" ~ 0,
        topic_conspicuous == "car" ~ 0,
        topic_conspicuous == "travel" ~ 1
      )
    )
  
  # Mean-center the effects coding variables
  df <- df %>%
    mutate(
      V1_conspicuous = V1_conspicuous - mean(V1_conspicuous, na.rm = TRUE),
      V2_conspicuous = V2_conspicuous - mean(V2_conspicuous, na.rm = TRUE),
      V3_conspicuous = V3_conspicuous - mean(V3_conspicuous, na.rm = TRUE)
    )
  
  return(df)
}

control_cooperation <- apply_topic_coding_conspicuous(control_cooperation)


# Recode DV for each dataset - options 1 & 3 to 1, options 2 & 4 to 0
recode_dv_conspicuous <- function(df) {
  df %>%
    mutate(post_status_conspicuous = case_when(
      conspicuous %in% c(1, 3) ~ 1,  # Status signal
      conspicuous %in% c(2, 4) ~ 0,  # Modesty
      TRUE ~ NA_real_
    ))
}

control_cooperation <- recode_dv_conspicuous(control_cooperation)
control_cooperation <- control_cooperation %>% relocate (post_status_conspicuous, .after = conspicuous)

# Run the logistic regression
model_control_coop_conspicuous <- glm(post_status_conspicuous ~ condition_coded * (V1_conspicuous + V2_conspicuous + V3_conspicuous), 
                         data = control_cooperation, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_control_coop_conspicuous <- summary(model_control_coop_conspicuous)
print(model_summary_control_coop_conspicuous)

model_tidy_control_coop_conspicuous <- tidy(model_control_coop_conspicuous)

# Calculate Wald chi-square and p-values
table1_results_control_coop_conspicuous <- model_tidy_control_coop_conspicuous %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_coop_conspicuous)

# χ² = 2.15, p = 0.143, the main effect is not significant, interactions are not significant

# Calculate proportion of status signaling posts by condition
proportion_results_control_coop_conspicuous <- control_cooperation %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_conspicuous == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_coop_conspicuous)

# Control: 37.54% vs. Cooperation: 31.1%



```

## Main effect (Extension): Competition vs. control (conspicuous)

```{r}
#| label: Main effect (replication): Competition vs. control (conspicuous)
#| include: false

control_competition <- replication %>%
  filter(condition %in% c("control", "competition"))

# Recode condition for control vs. cooperation dataset
control_competition <- control_competition %>%
  mutate(condition_coded = case_when(
    condition == "competition" ~ 1,
    condition == "control" ~ -1
  ))

control_competition <- control_competition %>% relocate (condition_coded, .after = condition)



control_competition <- apply_topic_coding_conspicuous(control_competition)


control_competition <- recode_dv_conspicuous(control_competition)
control_competition <- control_competition %>% relocate (post_status_conspicuous, .after = conspicuous)

# Run the logistic regression
model_control_comp_conspicuous <- glm(post_status_conspicuous ~ condition_coded * (V1_conspicuous + V2_conspicuous + V3_conspicuous), 
                         data = control_competition, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_control_comp_conspicuous <- summary(model_control_comp_conspicuous)
print(model_summary_control_comp_conspicuous)

model_tidy_control_comp_conspicuous <- tidy(model_control_comp_conspicuous)

# Calculate Wald chi-square and p-values
table1_results_control_comp_conspicuous <- model_tidy_control_comp_conspicuous %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_comp_conspicuous)

# χ² = 1.04, p = 0.307, the main effect is not significant; however, the interaction is significant for condition_coded:V2_conspicuous (χ² = 7.70, p = 0.006)

# Calculate proportion of status signaling posts by condition
proportion_results_control_comp_conspicuous <- control_competition %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_conspicuous == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_comp_conspicuous)

# Competition: 39.94% vs. Control: 37.54%



```

## Main effect (Extension): Competition vs. cooperation (conspicuous)

```{r}
#| label: Main effect (replication): Competition vs. cooperation (conspicuous)
#| include: false

cooperation_competition <- replication %>%
  filter(condition %in% c("cooperation", "competition"))

# Recode condition for control vs. cooperation dataset
cooperation_competition <- cooperation_competition %>%
  mutate(condition_coded = case_when(
    condition == "competition" ~ 1,
    condition == "cooperation" ~ -1
  ))

cooperation_competition <- cooperation_competition %>% relocate (condition_coded, .after = condition)



cooperation_competition <- apply_topic_coding_conspicuous(cooperation_competition)


cooperation_competition <- recode_dv_conspicuous(cooperation_competition)
cooperation_competition <- cooperation_competition %>% relocate (post_status_conspicuous, .after = conspicuous)

# Run the logistic regression
model_coop_comp_conspicuous <- glm(post_status_conspicuous ~ condition_coded * (V1_conspicuous + V2_conspicuous + V3_conspicuous), 
                         data = cooperation_competition, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_coop_comp_conspicuous <- summary(model_coop_comp_conspicuous)
print(model_summary_coop_comp_conspicuous)

model_tidy_coop_comp_conspicuous <- tidy(model_coop_comp_conspicuous)

# Calculate Wald chi-square and p-values
table1_results_coop_comp_conspicuous <- model_tidy_coop_comp_conspicuous %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_coop_comp_conspicuous)

# χ² = 7.38, p = 0.007, the main effect is significant, interaction is significant for condition_coded:V2_conspicuous (χ² = 4.22, p = 0.040)

# Calculate proportion of status signaling posts by condition
proportion_results_coop_comp_conspicuous <- cooperation_competition %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_conspicuous == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_coop_comp_conspicuous)

# Competition: 39.94% vs. Cooperation: 31.1%



```

# Bar plots (Conspicuous)

```{r}
#| label: Create bar plot for proportion comparison (conspicuous)
#| include: true

# Calculate overall proportion
overall_proportions_conspicuous <- replication %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_conspicuous = sum(conspicuous %in% c(1, 3), na.rm = TRUE),
    proportion = n_conspicuous / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

overall_proportions_conspicuous$condition <- factor(
  overall_proportions_conspicuous$condition,
  levels = c("competition", "control", "cooperation")
)

# Calculate proportions by condition and topic
proportion_by_condition_topic_conspicuous <- replication %>%
  group_by(condition, topic_conspicuous) %>%
  summarize(
    n_total = n(),
    n_conspicuous = sum(conspicuous %in% c(1, 3), na.rm = TRUE),
    proportion = n_conspicuous / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

# Make sure condition is ordered nicely for the plot
proportion_by_condition_topic_conspicuous$condition <- factor(
  proportion_by_condition_topic_conspicuous$condition,
  levels = c("competition", "control", "cooperation")
)

# Create the bar plot for overall
overall_plot_conspicuous <- ggplot(overall_proportions_conspicuous, aes(x = condition, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", width = 0.6) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            vjust = -0.5, size = 4.5) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  
  labs(
    title = "Overall Proportion Choosing Conspicuous Posts by Condition",
    x = "",
    y = "Percentage Choosing Conspicuous Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12, face = "bold"),
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    axis.title.y = element_text(face = "bold", size = 13),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 14)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(overall_proportions_conspicuous$percentage) * 1.15)

print (overall_plot_conspicuous)

# Create the bar plot for each topic
ggplot(proportion_by_condition_topic_conspicuous, aes(x = topic_conspicuous, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Add overall average line for each condition
  geom_hline(data = proportion_by_condition_topic_conspicuous %>% 
               group_by(condition) %>% 
               summarize(avg_percentage = mean(percentage)),
             aes(yintercept = avg_percentage, color = condition),
             linetype = "dashed") +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "Proportion Choosing Conspicuous Posts by Condition and Topic",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Topic",
    y = "Percentage Choosing Conspicuous Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_conspicuous$percentage) * 1.1)


# The interaction between condition and topic (car) is revealed here. 

##with overall percentages

ggplot(proportion_by_condition_topic_conspicuous, aes(x = topic_conspicuous, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Use the correct overall average for each condition
  geom_hline(data = overall_proportions_conspicuous, 
             aes(yintercept = percentage, color = condition),
             linetype = "dashed") +
  
  # Add percentage labels for overall averages (slightly above dashed line)
  geom_text(data = overall_proportions_conspicuous,
            aes(x = -Inf,  # Move text to far left
                y = percentage + 2,  # Slightly above dashed line
                label = sprintf("%.1f%%", percentage), 
                color = condition),
            size = 3, fontface = "bold", hjust = 0) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "",
    subtitle = "",
    x = "Topic",
    y = "Percentage Choosing Conspicuous Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_conspicuous$percentage) * 1.1)



```

## Main effect (Robustness): Conspicuous (Linear regressions)

```{r}
#| label: Main effect (Robustness): Conspicuous (Linear regressions)
#| include: false

# 1. Control vs. cooperation (conspicuous)

# Run the linear regression instead of logistic regression
model_control_coop_conspicuous_linear <- lm(post_status_conspicuous ~ condition_coded * (V1_conspicuous + V2_conspicuous + V3_conspicuous), 
                         data = control_cooperation)

# Get the summary table 
model_summary_control_coop_conspicuous_linear <- summary(model_control_coop_conspicuous_linear)
print(model_summary_control_coop_conspicuous_linear)

# Create a tidy table of the results
model_tidy_control_coop_conspicuous_linear <- tidy(model_control_coop_conspicuous_linear)

# Calculate F-values and p-values for table
table1_results_control_coop_conspicuous_linear <- model_tidy_control_coop_conspicuous_linear %>%
  mutate(
    t_sq = statistic^2, # t-squared is approximately F with 1 df in numerator
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "F = ", format(round(t_sq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, t_sq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_coop_conspicuous_linear)


# F = 1.91, p = 0.167, insignificant; interactions not significant

# 2. Control vs. competition (conspicuous)

# Run the linear regression instead of logistic regression
model_control_comp_conspicuous_linear <- lm(post_status_conspicuous ~ condition_coded * (V1_conspicuous + V2_conspicuous + V3_conspicuous), 
                         data = control_competition)

# Get the summary table 
model_summary_control_comp_conspicuous_linear <- summary(model_control_comp_conspicuous_linear)
print(model_summary_control_comp_conspicuous_linear)

# Create a tidy table of the results
model_tidy_control_comp_conspicuous_linear <- tidy(model_control_comp_conspicuous_linear)

# Calculate F-values and p-values for table
table1_results_control_comp_conspicuous_linear <- model_tidy_control_comp_conspicuous_linear %>%
  mutate(
    t_sq = statistic^2, # t-squared is approximately F with 1 df in numerator
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "F = ", format(round(t_sq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, t_sq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_comp_conspicuous_linear)

# F = 1.41, p = 0.236, insignificant; interaction for condition:V2_conspicuous is significant (F = 9.26, p = 0.002)


# 3. Cooperation vs. competition (conspicuous)

# Run the linear regression instead of logistic regression
model_coop_comp_conspicuous_linear <- lm(post_status_conspicuous ~ condition_coded * (V1_conspicuous + V2_conspicuous + V3_conspicuous), 
                         data = cooperation_competition)

# Get the summary table 
model_summary_coop_comp_conspicuous_linear <- summary(model_coop_comp_conspicuous_linear)
print(model_summary_coop_comp_conspicuous_linear)

# Create a tidy table of the results
model_tidy_coop_comp_conspicuous_linear <- tidy(model_coop_comp_conspicuous_linear)

# Calculate F-values and p-values for table
table1_results_coop_comp_conspicuous_linear <- model_tidy_coop_comp_conspicuous_linear %>%
  mutate(
    t_sq = statistic^2, # t-squared is approximately F with 1 df in numerator
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "F = ", format(round(t_sq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, t_sq, p_value, result_formatted)

# Print the formatted table
print(table1_results_coop_comp_conspicuous_linear)

# F = 8.44, p = 0.004, significant, interaction for condition:V2_conspicuous is significant (F = 6.66, p = 0.010)





```

## Main effect (extension): Prosocial Domain

```{r}
#| label: Main effect: Cooperation vs. control (prosocial)
#| include: false


# Function to apply effects coding for topics
apply_topic_coding_prosocial <- function(df) {
  # Create effects coding for topics following the specified coding scheme
  df <- df %>%
    mutate(
      V1_prosocial = case_when(
        topic_prosocial == "donation" ~ -1,
        topic_prosocial == "volunteering" ~ 1,
        topic_prosocial == "mentoring" ~ 0,
        topic_prosocial == "concert" ~ 0
      ),
      V2_prosocial = case_when(
        topic_prosocial == "donation" ~ -1,
        topic_prosocial == "volunteering" ~ 0,
        topic_prosocial == "mentoring" ~ 1,
        topic_prosocial == "concert" ~ 0
      ),
      V3_prosocial = case_when(
        topic_prosocial == "donation" ~ -1,
        topic_prosocial == "volunteering" ~ 0,
        topic_prosocial == "mentoring" ~ 0,
        topic_prosocial == "concert" ~ 1
      )
    )
  
  # Mean-center the effects coding variables
  df <- df %>%
    mutate(
      V1_prosocial = V1_prosocial - mean(V1_prosocial, na.rm = TRUE),
      V2_prosocial = V2_prosocial - mean(V2_prosocial, na.rm = TRUE),
      V3_prosocial = V3_prosocial - mean(V3_prosocial, na.rm = TRUE)
    )
  
  return(df)
}

control_cooperation <- apply_topic_coding_prosocial(control_cooperation)


# Recode DV for each dataset - options 1 & 3 to 1, options 2 & 4 to 0
recode_dv_prosocial <- function(df) {
  df %>%
    mutate(post_status_prosocial = case_when(
      prosocial %in% c(1, 3) ~ 1,  # Status signal
      prosocial %in% c(2, 4) ~ 0,  # Modesty
      TRUE ~ NA_real_
    ))
}

control_cooperation <- recode_dv_prosocial(control_cooperation)
control_cooperation <- control_cooperation %>% relocate (post_status_prosocial, .after = prosocial)

# Run the logistic regression
model_control_coop_prosocial <- glm(post_status_prosocial ~ condition_coded * (V1_prosocial + V2_prosocial + V3_prosocial), 
                         data = control_cooperation, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_control_coop_prosocial <- summary(model_control_coop_prosocial)
print(model_summary_control_coop_prosocial)

model_tidy_control_coop_prosocial <- tidy(model_control_coop_prosocial)

# Calculate Wald chi-square and p-values
table1_results_control_coop_prosocial <- model_tidy_control_coop_prosocial %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_coop_prosocial)

# χ² = 21.64, p < .001, the main effect is significant, interactions are not significant

# Calculate proportion of status signaling posts by condition
proportion_results_control_coop_prosocial <- control_cooperation %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_prosocial == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_coop_prosocial)

# Cooperation: 63.11% vs. Control: 45.35%



```

```{r}
#| label: Main effect: Competition vs. control (prosocial)
#| include: false


control_competition <- apply_topic_coding_prosocial(control_competition)

control_competition <- recode_dv_prosocial(control_competition)
control_competition <- control_competition %>% relocate (post_status_prosocial, .after = prosocial)

# Run the logistic regression
model_control_comp_prosocial <- glm(post_status_prosocial ~ condition_coded * (V1_prosocial + V2_prosocial + V3_prosocial), 
                         data = control_competition, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_control_comp_prosocial <- summary(model_control_comp_prosocial)
print(model_summary_control_comp_prosocial)

model_tidy_control_comp_prosocial <- tidy(model_control_comp_prosocial)

# Calculate Wald chi-square and p-values
table1_results_control_comp_prosocial <- model_tidy_control_comp_prosocial %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_comp_prosocial)

# χ² = 30.62, p < .001, the main effect is significant; however, the interaction is not insignificant

# Calculate proportion of status signaling posts by condition
proportion_results_control_comp_prosocial <- control_competition %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_prosocial == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_comp_prosocial)

# Competition: 66.77% vs. Control: 45.35%



```

```{r}
#| label: Main effect: Competition vs. cooperation (prosocial)
#| include: false


cooperation_competition <- apply_topic_coding_prosocial(cooperation_competition)


cooperation_competition <- recode_dv_prosocial(cooperation_competition)
cooperation_competition <- cooperation_competition %>% relocate (post_status_prosocial, .after = prosocial)

# Run the logistic regression
model_coop_comp_prosocial <- glm(post_status_prosocial ~ condition_coded * (V1_prosocial + V2_prosocial + V3_prosocial), 
                         data = cooperation_competition, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_coop_comp_prosocial <- summary(model_coop_comp_prosocial)
print(model_summary_coop_comp_prosocial)

model_tidy_coop_comp_prosocial <- tidy(model_coop_comp_prosocial)

# Calculate Wald chi-square and p-values
table1_results_coop_comp_prosocial <- model_tidy_coop_comp_prosocial %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_coop_comp_prosocial)

# χ² = 1.08, p = 0.299, the main effect is not significant, interaction is not significant

# Calculate proportion of status signaling posts by condition
proportion_results_coop_comp_prosocial <- cooperation_competition %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_prosocial == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_coop_comp_prosocial)

# Competition: 66.77% vs. Cooperation: 63.1%



```

# Bar plots (Prosocial)

```{r}
#| label: Create bar plot for proportion comparison (prosocial)
#| include: true

# Calculate overall proportion
overall_proportions_prosocial <- replication %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_prosocial = sum(prosocial %in% c(1, 3), na.rm = TRUE),
    proportion = n_prosocial / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

overall_proportions_prosocial$condition <- factor(
  overall_proportions_prosocial$condition,
  levels = c("competition", "control", "cooperation")
)

# Calculate proportions by condition and topic
proportion_by_condition_topic_prosocial <- replication %>%
  group_by(condition, topic_prosocial) %>%
  summarize(
    n_total = n(),
    n_prosocial = sum(prosocial %in% c(1, 3), na.rm = TRUE),
    proportion = n_prosocial / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

# Make sure condition is ordered nicely for the plot
proportion_by_condition_topic_prosocial$condition <- factor(
  proportion_by_condition_topic_prosocial$condition,
  levels = c("competition", "control", "cooperation")
)

# Create the bar plot for overall
overall_plot_prosocial <- ggplot(overall_proportions_prosocial, aes(x = condition, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", width = 0.6) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            vjust = -0.5, size = 4.5) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  
  labs(
    title = "Overall Proportion Choosing Prosocial Posts by Condition",
    x = "",
    y = "Percentage Choosing Prosocial Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12, face = "bold"),
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    axis.title.y = element_text(face = "bold", size = 13),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 14)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(overall_proportions_prosocial$percentage) * 1.15)

print (overall_plot_prosocial)

# Create the bar plot for each topic
ggplot(proportion_by_condition_topic_prosocial, aes(x = topic_prosocial, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Add overall average line for each condition
  geom_hline(data = proportion_by_condition_topic_prosocial %>% 
               group_by(condition) %>% 
               summarize(avg_percentage = mean(percentage)),
             aes(yintercept = avg_percentage, color = condition),
             linetype = "dashed") +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "Proportion Choosing Prosocial Posts by Condition and Topic",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Topic",
    y = "Percentage Choosing Prosocial Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_prosocial$percentage) * 1.1)

#with overall percentages

ggplot(proportion_by_condition_topic_prosocial, aes(x = topic_prosocial, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Use the correct overall average for each condition
  geom_hline(data = overall_proportions_prosocial, 
             aes(yintercept = percentage, color = condition),
             linetype = "dashed") +
  
  # Add percentage labels for overall averages (slightly above dashed line)
  geom_text(data = overall_proportions_prosocial,
            aes(x = -Inf,  # Move text to far left
                y = percentage + 2,  # Slightly above dashed line
                label = sprintf("%.1f%%", percentage), 
                color = condition),
            size = 3, fontface = "bold", hjust = 0) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "",
    subtitle = "",
    x = "Topic",
    y = "Percentage Choosing Prosocial Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_prosocial$percentage) * 1.1)




```

## Main effect (extension): Competence Domain

```{r}
#| label: Main effect: Cooperation vs. control (prosocial)
#| include: false


# Function to apply effects coding for topics
apply_topic_coding_competence <- function(df) {
  # Create effects coding for topics following the specified coding scheme
  df <- df %>%
    mutate(
      V1_competence = case_when(
        topic_competence == "mba" ~ -1,
        topic_competence == "tedx" ~ 1,
        topic_competence == "summit" ~ 0,
        topic_competence == "award" ~ 0
      ),
      V2_competence = case_when(
        topic_competence == "mba" ~ -1,
        topic_competence == "tedx" ~ 0,
        topic_competence == "summit" ~ 1,
        topic_competence == "award" ~ 0
      ),
      V3_competence = case_when(
        topic_competence == "mba" ~ -1,
        topic_competence == "tedx" ~ 0,
        topic_competence == "summit" ~ 0,
        topic_competence == "award" ~ 1
      )
    )
  
  # Mean-center the effects coding variables
  df <- df %>%
    mutate(
      V1_competence = V1_competence - mean(V1_competence, na.rm = TRUE),
      V2_competence = V2_competence - mean(V2_competence, na.rm = TRUE),
      V3_competence = V3_competence - mean(V3_competence, na.rm = TRUE)
    )
  
  return(df)
}

control_cooperation <- apply_topic_coding_competence(control_cooperation)


# Recode DV for each dataset - options 1 & 3 to 1, options 2 & 4 to 0
recode_dv_competence <- function(df) {
  df %>%
    mutate(post_status_competence = case_when(
      competence %in% c(1, 3) ~ 1,  # Status signal
      competence %in% c(2, 4) ~ 0,  # Modesty
      TRUE ~ NA_real_
    ))
}

control_cooperation <- recode_dv_competence(control_cooperation)
control_cooperation <- control_cooperation %>% relocate (post_status_competence, .after = competence)

# Run the logistic regression
model_control_coop_competence <- glm(post_status_competence ~ condition_coded * (V1_competence + V2_competence+ V3_competence), 
                         data = control_cooperation, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_control_coop_competence <- summary(model_control_coop_competence)
print(model_summary_control_coop_competence)

model_tidy_control_coop_competence <- tidy(model_control_coop_competence)

# Calculate Wald chi-square and p-values
table1_results_control_coop_competence <- model_tidy_control_coop_competence %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_coop_competence)

# χ² = 4.63, p = 0.031, the main effect is significant, interactions are not significant

# Calculate proportion of status signaling posts by condition
proportion_results_control_coop_competence <- control_cooperation %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_competence == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_coop_competence)

# Cooperation: 46.34% vs. Control: 37.84%



```

```{r}
#| label: Main effect: Competition vs. control (competence)
#| include: false


control_competition <- apply_topic_coding_competence(control_competition)

control_competition <- recode_dv_competence(control_competition)
control_competition <- control_competition %>% relocate (post_status_competence, .after = competence)

# Run the logistic regression
model_control_comp_competence <- glm(post_status_competence ~ condition_coded * (V1_competence + V2_competence + V3_competence), 
                         data = control_competition, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_control_comp_competence <- summary(model_control_comp_competence)
print(model_summary_control_comp_competence)

model_tidy_control_comp_competence <- tidy(model_control_comp_competence)

# Calculate Wald chi-square and p-values
table1_results_control_comp_competence <- model_tidy_control_comp_competence %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_control_comp_competence)

# χ² = 58.21, p < .001, the main effect is significant; however, the interaction is not insignificant

# Calculate proportion of status signaling posts by condition
proportion_results_control_comp_competence <- control_competition %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_competence == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_comp_competence)

# Competition: 67.99% vs. Control: 37.84%



```

```{r}
#| label: Main effect: Competition vs. cooperation (competence)
#| include: false


cooperation_competition <- apply_topic_coding_competence (cooperation_competition)


cooperation_competition <- recode_dv_competence(cooperation_competition)
cooperation_competition <- cooperation_competition %>% relocate (post_status_competence, .after = competence)

# Run the logistic regression
model_coop_comp_competence <- glm(post_status_competence ~ condition_coded * (V1_competence + V2_competence + V3_competence), 
                         data = cooperation_competition, 
                         family = binomial(link = "logit"))

# Get the summary table with Wald chi-square values
model_summary_coop_comp_competence <- summary(model_coop_comp_competence)
print(model_summary_coop_comp_competence)

model_tidy_coop_comp_competence <- tidy(model_coop_comp_competence)

# Calculate Wald chi-square and p-values
table1_results_coop_comp_competence <- model_tidy_coop_comp_competence %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(table1_results_coop_comp_competence)

# χ² = 31.96, p < .001, the main effect is not significant, interaction is not significant

# Calculate proportion of status signaling posts by condition
proportion_results_coop_comp_competence <- cooperation_competition %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(post_status_competence == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_coop_comp_competence)

# Competition: 67.99% vs. Cooperation: 46.34%



```

# Bar plots (competence)

```{r}
#| label: Create bar plot for proportion comparison (competence)
#| include: true

# Calculate overall proportion
overall_proportions_competence <- replication %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_competence = sum(competence %in% c(1, 3), na.rm = TRUE),
    proportion = n_competence / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

overall_proportions_competence$condition <- factor(
  overall_proportions_competence$condition,
  levels = c("competition", "control", "cooperation")
)

# Calculate proportions by condition and topic
proportion_by_condition_topic_competence <- replication %>%
  group_by(condition, topic_competence) %>%
  summarize(
    n_total = n(),
    n_competence = sum(competence %in% c(1, 3), na.rm = TRUE),
    proportion = n_competence / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

# Make sure condition is ordered nicely for the plot
proportion_by_condition_topic_competence$condition <- factor(
  proportion_by_condition_topic_competence$condition,
  levels = c("competition", "control", "cooperation")
)

# Create the bar plot for overall
overall_plot_competence <- ggplot(overall_proportions_competence, aes(x = condition, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", width = 0.6) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            vjust = -0.5, size = 4.5) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  
  labs(
    title = "Overall Proportion Choosing Competence Posts by Condition",
    x = "",
    y = "Percentage Choosing Competence Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12, face = "bold"),
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    axis.title.y = element_text(face = "bold", size = 13),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 14)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(overall_proportions_competence$percentage) * 1.15)

print (overall_plot_competence)

# Create the bar plot for each topic
ggplot(proportion_by_condition_topic_competence, aes(x = topic_competence, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Add overall average line for each condition
  geom_hline(data = proportion_by_condition_topic_competence %>% 
               group_by(condition) %>% 
               summarize(avg_percentage = mean(percentage)),
             aes(yintercept = avg_percentage, color = condition),
             linetype = "dashed") +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "Proportion Choosing Competence Posts by Condition and Topic",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Topic",
    y = "Percentage Choosing Competence Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_competence$percentage) * 1.1)

#with overall percentages

ggplot(proportion_by_condition_topic_competence, aes(x = topic_competence, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Use the correct overall average for each condition
  geom_hline(data = overall_proportions_competence, 
             aes(yintercept = percentage, color = condition),
             linetype = "dashed") +
  
  # Add percentage labels for overall averages (slightly above dashed line)
  geom_text(data = overall_proportions_competence,
            aes(x = -Inf,  # Move text to far left
                y = percentage + 2,  # Slightly above dashed line
                label = sprintf("%.1f%%", percentage), 
                color = condition),
            size = 3, fontface = "bold", hjust = 0) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "",
    subtitle = "",
    x = "Topic",
    y = "Percentage Choosing Competence Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_competence$percentage) * 1.1)




```

# Logistic Regression for Condition\*Domain

```{r}
#| label: Logistic regression for condition*domain
#| include: false

combined_condition_domain <- replication %>%
  mutate(
    conspicuous_signal = case_when(
      conspicuous %in% c(1, 3) ~ 1,  # Status signal
      conspicuous %in% c(2, 4) ~ 0   # Modesty
    ),
    prosocial_signal = case_when(
      prosocial %in% c(1, 3) ~ 1,    # Status signal
      prosocial %in% c(2, 4) ~ 0     # Modesty
    ),
    competence_signal = case_when(
      competence %in% c(1, 3) ~ 1,   # Status signal
      competence %in% c(2, 4) ~ 0    # Modesty
    )
  )


long_condition_domain <- combined_condition_domain %>%
  select(ID, condition, 
         conspicuous_signal, prosocial_signal, competence_signal) %>%
  pivot_longer(
    cols = c(conspicuous_signal, prosocial_signal, competence_signal),
    names_to = "domain",
    values_to = "status_signal"
  ) %>%
  # Clean up domain names
  mutate(domain = gsub("_signal", "", domain))

long_condition_domain <- long_condition_domain %>%
  mutate(
    condition = factor(condition, levels = c("control", "competition", "cooperation")),
    domain = factor(domain, levels = c("conspicuous", "prosocial", "competence"))
  )

# Regression model
pool_model_condition_domain <- glm(status_signal ~ condition * domain,
               data = long_condition_domain,
               family = binomial(link = "logit"))

# Get model summary
summary_pool_model_condition_domain <- summary(pool_model_condition_domain)
print(summary_pool_model_condition_domain)

# Calculate Wald chi-square and format results
pool_results_condition_domain <- tidy(pool_model_condition_domain) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

# Print the formatted table
print(pool_results_condition_domain)



# Significant:

# 1. Pro-social domain: χ² = 4.17, p = 0.041

# 2. All interactions are significant (see the table); 

# Competition × Prosocial (χ² = 11.94, p < .001): Strong positive coefficient (0.783) indicates that competition increases status signaling substantially more in the prosocial domain than in the conspicuous domain.

# Competition × Competence (χ² = 25.22, p < .001): Very strong positive coefficient (1.148) shows that competition increases status signaling most dramatically for competence-based signals.


# Cooperation × Prosocial (χ² = 19.52, p < .001): Large positive coefficient (1.010) shows that cooperation actually increases prosocial signaling compared to conspicuous signaling.

# Cooperation × Competence (χ² = 7.77, p = 0.005): Significant positive coefficient (0.636) indicates cooperation also increases competence signaling compared to conspicuous signaling.







```

# Modest Signaling Analysis

## Conspicuous Domain

### Control vs. Cooperation

```{r}
#| label: Modest signaling analysis: conspicuous domain (coop vs. control)
#| include: false

install.packages("nnet")
library(nnet)

# Multinomial logistic regression for conspicuous domain (coop vs. control)

control_cooperation_modest <- control_cooperation %>%
  filter(topic_modest %in% c("car", "attire", "food", "travel"))

# Recode topic variables using effects coding for conspicuous domain
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(
    V1_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 1,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 0
    ),
    V2_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 1,
      topic_modest == "travel" ~ 0
    ),
    V3_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 1
    )
  )

# Mean-center the effects-coded variables
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(
    V1_conspicuous_modest = V1_conspicuous_modest - mean(V1_conspicuous_modest, na.rm = TRUE),
    V2_conspicuous_modest = V2_conspicuous_modest - mean(V2_conspicuous_modest, na.rm = TRUE),
    V3_conspicuous_modest = V3_conspicuous_modest - mean(V3_conspicuous_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_control_coop_conspicuous <- multinom(signaling_type ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                     data = control_cooperation_modest)

# Print the summary
summary_modest_model_control_coop_conspicuous <- summary(modest_model_control_coop_conspicuous)
print(summary_modest_model_control_coop_conspicuous)

# Calculate z-scores and p-values
z_scores_modest_model_control_coop_conspicuous <- summary_modest_model_control_coop_conspicuous$coefficients / summary_modest_model_control_coop_conspicuous$standard.errors
p_values_modest_model_control_coop_conspicuous <- (1 - pnorm(abs(z_scores_modest_model_control_coop_conspicuous))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_control_coop_conspicuous)
print("P-values:")
print(p_values_modest_model_control_coop_conspicuous)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_control_coop_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_control_coop_conspicuous),
  coefficient = summary_modest_model_control_coop_conspicuous$coefficients[1,],
  std_error = summary_modest_model_control_coop_conspicuous$standard.errors[1,],
  z_score = z_scores_modest_model_control_coop_conspicuous[1,],
  p_value = p_values_modest_model_control_coop_conspicuous[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_control_coop_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_control_coop_conspicuous),
  coefficient = summary_modest_model_control_coop_conspicuous$coefficients[2,],
  std_error = summary_modest_model_control_coop_conspicuous$standard.errors[2,],
  z_score = z_scores_modest_model_control_coop_conspicuous[2,],
  p_value = p_values_modest_model_control_coop_conspicuous[2,]
)

# Format the results for easier interpretation
format_results <- function(results_df) {
  results_df %>%
    mutate(
      p_formatted = case_when(
        p_value < 0.001 ~ "p < .001",
        p_value < 0.01 ~ paste0("p = ", format(round(p_value, 3), nsmall = 3)),
        TRUE ~ paste0("p = ", format(round(p_value, 3), nsmall = 3))
      ),
      wald_chisq = z_score^2,
      result_formatted = paste0(
        "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
        ", ", p_formatted
      )
    )}
  
# Apply formatting
overt_vs_modest_formatted_control_coop_conspicuous <- format_results(overt_vs_modest_control_coop_conspicuous)
silence_vs_modest_formatted_control_coop_conspicuous <- format_results(silence_vs_modest_control_coop_conspicuous)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_control_coop_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_control_coop_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Insignificant
# Silence vs. Modest Signaling (Reference): Insignificant (V3 is significant)


# Calculate proportion of status signaling posts by condition
proportion_results_control_coop_conspicuous_overt <- control_cooperation_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_control_coop_conspicuous_modesty <- control_cooperation_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )
# Print the results
print(proportion_results_control_coop_conspicuous_overt)
print (proportion_results_control_coop_conspicuous_modesty)

# Overt signaling: Control: 21.37% vs. Cooperation: 13.16%
# Modest signaling: Control: 17.95% vs. cooperation: 21.93%
# Here is a shift



# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_control_coop_conspicuous <- glm(overt_vs_rest ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                         data = control_cooperation_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_control_coop_conspicuous <- summary(overt_vs_rest_model_control_coop_conspicuous)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_control_coop_conspicuous)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_control_coop_conspicuous_results <- tidy(overt_vs_rest_model_control_coop_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_control_coop_conspicuous_results)

# All insignificant



# Calculate and display proportions by condition
overt_vs_rest_props_control_coop_conspicuous <- control_cooperation_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_control_coop_conspicuous)


# Overt signaling: Control: 21.37% vs. Cooperation: 13.16%

# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_control_coop_conspicuous <- glm(signal_vs_silence ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                             data = control_cooperation_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_control_coop_conspicuous <- summary(signal_vs_silence_model_control_coop_conspicuous)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_control_coop_conspicuous)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_control_coop_conspicuous_results <- tidy(signal_vs_silence_model_control_coop_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_control_coop_conspicuous_results)

# V1_conspicuous_modest and V3_conspicuous_modest is significant; topics have main effects

# Calculate and display proportions by condition
signal_vs_silence_props_control_coop_conspicuous <- control_cooperation_modest %>%
  group_by(topic_modest) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_control_coop_conspicuous)

# Food and travel have significantly more signalings: 49% and 48% compared with car (36%) and attire (17%)

```

### Control vs. Competition

```{r}
#| label: Modest signaling analysis: conspicuous domain (comp vs. control)
#| include: false

# Multinomial logistic regression for conspicuous domain (comp vs. control)

control_competition_modest <- control_competition %>%
  filter(topic_modest %in% c("car", "attire", "food", "travel"))

# Recode topic variables using effects coding for conspicuous domain
control_competition_modest <- control_competition_modest %>%
  mutate(
    V1_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 1,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 0
    ),
    V2_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 1,
      topic_modest == "travel" ~ 0
    ),
    V3_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 1
    )
  )

# Mean-center the effects-coded variables
control_competition_modest <- control_competition_modest %>%
  mutate(
    V1_conspicuous_modest = V1_conspicuous_modest - mean(V1_conspicuous_modest, na.rm = TRUE),
    V2_conspicuous_modest = V2_conspicuous_modest - mean(V2_conspicuous_modest, na.rm = TRUE),
    V3_conspicuous_modest = V3_conspicuous_modest - mean(V3_conspicuous_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
control_competition_modest <- control_competition_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_control_comp_conspicuous <- multinom(signaling_type ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                     data = control_competition_modest)

# Print the summary
summary_modest_model_control_comp_conspicuous <- summary(modest_model_control_comp_conspicuous)
print(summary_modest_model_control_comp_conspicuous)

# Calculate z-scores and p-values
z_scores_modest_model_control_comp_conspicuous <- summary_modest_model_control_comp_conspicuous$coefficients / summary_modest_model_control_comp_conspicuous$standard.errors
p_values_modest_model_control_comp_conspicuous <- (1 - pnorm(abs(z_scores_modest_model_control_comp_conspicuous))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_control_comp_conspicuous)
print("P-values:")
print(p_values_modest_model_control_comp_conspicuous)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_control_comp_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_control_comp_conspicuous),
  coefficient = summary_modest_model_control_comp_conspicuous$coefficients[1,],
  std_error = summary_modest_model_control_comp_conspicuous$standard.errors[1,],
  z_score = z_scores_modest_model_control_comp_conspicuous[1,],
  p_value = p_values_modest_model_control_comp_conspicuous[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_control_comp_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_control_comp_conspicuous),
  coefficient = summary_modest_model_control_comp_conspicuous$coefficients[2,],
  std_error = summary_modest_model_control_comp_conspicuous$standard.errors[2,],
  z_score = z_scores_modest_model_control_comp_conspicuous[2,],
  p_value = p_values_modest_model_control_comp_conspicuous[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_control_comp_conspicuous <- format_results(overt_vs_modest_control_comp_conspicuous)
silence_vs_modest_formatted_control_comp_conspicuous <- format_results(silence_vs_modest_control_comp_conspicuous)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_control_comp_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_control_comp_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Insignificant
# Silence vs. Modest Signaling (Reference): Significant (Condition is significant, χ² = 12.67, p < .001)


# Calculate proportion of status signaling posts by condition
proportion_results_control_comp_conspicuous_overt <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_control_comp_conspicuous_modesty <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_control_comp_conspicuous_silence <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_comp_conspicuous_overt)
print (proportion_results_control_comp_conspicuous_modesty)
print (proportion_results_control_comp_conspicuous_silence)

# Overt signaling: Control: 21.36% vs. Competition: 21.87%
# Modest signaling: Control: 17.95% vs. Competition: 39.58% (I am quite confused why multinomial analysis indicated this as insignificant, it changes a lot compared with the overt signaling situation. Competition condition results in more modest signaling than control)
# Silence: Control: 60.69% vs. Competition: 38.55%

# Here is a shift


# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
control_competition_modest <- control_competition_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_control_comp_conspicuous <- glm(overt_vs_rest ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                         data = control_competition_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_control_comp_conspicuous <- summary(overt_vs_rest_model_control_comp_conspicuous)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_control_comp_conspicuous)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_control_comp_conspicuous_results <- tidy(overt_vs_rest_model_control_comp_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_control_comp_conspicuous_results)

# All insignificant



# Calculate and display proportions by condition
overt_vs_rest_props_control_comp_conspicuous <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_control_comp_conspicuous)


# Overt signaling: Competition: 21.87% vs. Control: 21.36%


# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
control_competition_modest <- control_competition_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_control_comp_conspicuous <- glm(signal_vs_silence ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                             data = control_competition_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_control_comp_conspicuous <- summary(signal_vs_silence_model_control_comp_conspicuous)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_control_comp_conspicuous)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_control_comp_conspicuous_results <- tidy(signal_vs_silence_model_control_comp_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_control_comp_conspicuous_results)

# Condition and V1_conspicuous_modest are significant

# Calculate and display proportions by condition and topics

signal_vs_silence_props_control_comp_conspicuous <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2a:")
print(signal_vs_silence_props_control_comp_conspicuous)

# Competition 61% vs. control 39%, more under competition chose signaling


signal_vs_silence_props_control_comp_conspicuous <- control_competition_modest %>%
  group_by(topic_modest) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2b:")
print(signal_vs_silence_props_control_comp_conspicuous)

# Food has significantly more signalings: 59% compared especially with attire (34%)

```

### Cooperation vs. Competition

```{r}
#| label: Modest signaling analysis: conspicuous domain (coop vs. comp)
#| include: false

# Multinomial logistic regression for conspicuous domain (coop vs. comp)

cooperation_competition_modest <- cooperation_competition %>%
  filter(topic_modest %in% c("car", "attire", "food", "travel"))

# Recode topic variables using effects coding for conspicuous domain
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(
    V1_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 1,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 0
    ),
    V2_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 1,
      topic_modest == "travel" ~ 0
    ),
    V3_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 1
    )
  )

# Mean-center the effects-coded variables
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(
    V1_conspicuous_modest = V1_conspicuous_modest - mean(V1_conspicuous_modest, na.rm = TRUE),
    V2_conspicuous_modest = V2_conspicuous_modest - mean(V2_conspicuous_modest, na.rm = TRUE),
    V3_conspicuous_modest = V3_conspicuous_modest - mean(V3_conspicuous_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_coop_comp_conspicuous <- multinom(signaling_type ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                     data = cooperation_competition_modest)

# Print the summary
summary_modest_model_coop_comp_conspicuous <- summary(modest_model_coop_comp_conspicuous)
print(summary_modest_model_coop_comp_conspicuous)

# Calculate z-scores and p-values
z_scores_modest_model_coop_comp_conspicuous <- summary_modest_model_coop_comp_conspicuous$coefficients / summary_modest_model_coop_comp_conspicuous$standard.errors
p_values_modest_model_coop_comp_conspicuous <- (1 - pnorm(abs(z_scores_modest_model_coop_comp_conspicuous))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_coop_comp_conspicuous)
print("P-values:")
print(p_values_modest_model_coop_comp_conspicuous)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_coop_comp_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_coop_comp_conspicuous),
  coefficient = summary_modest_model_coop_comp_conspicuous$coefficients[1,],
  std_error = summary_modest_model_coop_comp_conspicuous$standard.errors[1,],
  z_score = z_scores_modest_model_coop_comp_conspicuous[1,],
  p_value = p_values_modest_model_coop_comp_conspicuous[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_coop_comp_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_coop_comp_conspicuous),
  coefficient = summary_modest_model_coop_comp_conspicuous$coefficients[2,],
  std_error = summary_modest_model_coop_comp_conspicuous$standard.errors[2,],
  z_score = z_scores_modest_model_coop_comp_conspicuous[2,],
  p_value = p_values_modest_model_coop_comp_conspicuous[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_coop_comp_conspicuous <- format_results(overt_vs_modest_coop_comp_conspicuous)
silence_vs_modest_formatted_coop_comp_conspicuous <- format_results(silence_vs_modest_coop_comp_conspicuous)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_coop_comp_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_coop_comp_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):V3 is significant
# Silence vs. Modest Signaling (Reference): Significant (Condition is significant, χ² = 11.14, p < .001; V3 is significant)


# Calculate proportion of status signaling posts by condition
proportion_results_coop_comp_conspicuous_overt <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_coop_comp_conspicuous_modesty <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_coop_comp_conspicuous_silence <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_coop_comp_conspicuous_overt)
print (proportion_results_coop_comp_conspicuous_modesty)
print (proportion_results_coop_comp_conspicuous_silence)

# Overt signaling: Cooperation: 13% vs. Competition: 22%
# Modest signaling: Cooperation: 22% vs. Competition: 40% 
# Silence: Cooperation: 65% vs. Competition: 39%

# Here is a shift


# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_coop_comp_conspicuous <- glm(overt_vs_rest ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                         data = cooperation_competition_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_coop_comp_conspicuous <- summary(overt_vs_rest_model_coop_comp_conspicuous)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_coop_comp_conspicuous)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_coop_comp_conspicuous_results <- tidy(overt_vs_rest_model_coop_comp_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_coop_comp_conspicuous_results)

# All insignificant



# Calculate and display proportions by condition
overt_vs_rest_props_coop_comp_conspicuous <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_coop_comp_conspicuous)


# Overt signaling: Control: 21.87% vs. Cooperation: 13.16%


# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_coop_comp_conspicuous <- glm(signal_vs_silence ~ condition_coded * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                             data = cooperation_competition_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_coop_comp_conspicuous <- summary(signal_vs_silence_model_coop_comp_conspicuous)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_coop_comp_conspicuous)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_coop_comp_conspicuous_results <- tidy(signal_vs_silence_model_coop_comp_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_coop_comp_conspicuous_results)

# Condition is significant (χ² = 13.32, p < .001)

# Calculate and display proportions by condition

signal_vs_silence_props_coop_comp_conspicuous <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_coop_comp_conspicuous)

# Competition 61% vs. cooperation 35%, more under competition chose signaling



```

## Prosocial Domain

### Control vs. Cooperation

```{r}
#| label: Modest signaling analysis: prosocial domain (coop vs. control)
#| include: false


# Multinomial logistic regression for prosocial domain (coop vs. control)

control_cooperation_modest <- control_cooperation %>%
  filter(topic_modest %in% c("donation", "volunteering", "mentoring", "concert"))

# Recode topic variables using effects coding for conspicuous domain
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(
    V1_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 1,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 0
    ),
    V2_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 1,
      topic_modest == "concert" ~ 0
    ),
    V3_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 1
    )
  )

# Mean-center the effects-coded variables
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(
    V1_prosocial_modest = V1_prosocial_modest - mean(V1_prosocial_modest, na.rm = TRUE),
    V2_prosocial_modest = V2_prosocial_modest - mean(V2_prosocial_modest, na.rm = TRUE),
    V3_prosocial_modest = V3_prosocial_modest - mean(V3_prosocial_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_control_coop_prosocial <- multinom(signaling_type ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                     data = control_cooperation_modest)

# Print the summary
summary_modest_model_control_coop_prosocial <- summary(modest_model_control_coop_prosocial)
print(summary_modest_model_control_coop_prosocial)

# Calculate z-scores and p-values
z_scores_modest_model_control_coop_prosocial <- summary_modest_model_control_coop_prosocial$coefficients / summary_modest_model_control_coop_prosocial$standard.errors
p_values_modest_model_control_coop_prosocial <- (1 - pnorm(abs(z_scores_modest_model_control_coop_prosocial))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_control_coop_prosocial)
print("P-values:")
print(p_values_modest_model_control_coop_prosocial)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_control_coop_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_control_coop_prosocial),
  coefficient = summary_modest_model_control_coop_prosocial$coefficients[1,],
  std_error = summary_modest_model_control_coop_prosocial$standard.errors[1,],
  z_score = z_scores_modest_model_control_coop_prosocial[1,],
  p_value = p_values_modest_model_control_coop_prosocial[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_control_coop_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_control_coop_prosocial),
  coefficient = summary_modest_model_control_coop_prosocial$coefficients[2,],
  std_error = summary_modest_model_control_coop_prosocial$standard.errors[2,],
  z_score = z_scores_modest_model_control_coop_prosocial[2,],
  p_value = p_values_modest_model_control_coop_prosocial[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_control_coop_prosocial <- format_results(overt_vs_modest_control_coop_prosocial)
silence_vs_modest_formatted_control_coop_prosocial <- format_results(silence_vs_modest_control_coop_prosocial)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_control_coop_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_control_coop_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):V2 is significant
# Silence vs. Modest Signaling (Reference): V2 and V3 are significant





# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_control_coop_prosocial <- glm(overt_vs_rest ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                         data = control_cooperation_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_control_coop_prosocial <- summary(overt_vs_rest_model_control_coop_prosocial)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_control_coop_prosocial)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_control_coop_prosocial_results <- tidy(overt_vs_rest_model_control_coop_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_control_coop_prosocial_results)

# Condition is significant (χ² = 6.00, p = 0.014)



# Calculate and display proportions by condition
overt_vs_rest_props_control_coop_prosocial <- control_cooperation_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_control_coop_prosocial)


# Overt signaling: Control: 20% vs. Cooperation: 33%

# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_control_coop_prosocial <- glm(signal_vs_silence ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                             data = control_cooperation_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_control_coop_prosocial <- summary(signal_vs_silence_model_control_coop_prosocial)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_control_coop_prosocial)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_control_coop_prosocial_results <- tidy(signal_vs_silence_model_control_coop_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_control_coop_prosocial_results)

# Condition is significant

# Calculate and display proportions by condition
signal_vs_silence_props_control_coop_prosocial <- control_cooperation_modest %>%
  group_by(topic_modest) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_control_coop_prosocial)

# Concert 77%, donation 59%

```

### Control vs. Competition

```{r}
#| label: Modest signaling analysis: prosocial domain (comp vs. control)
#| include: false

# Multinomial logistic regression for prosocials domain (comp vs. control)

control_competition_modest <- control_competition %>%
  filter(topic_modest %in% c("donation", "volunteering", "mentoring", "concert"))

# Recode topic variables using effects coding for conspicuous domain
control_competition_modest <- control_competition_modest %>%
  mutate(
    V1_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 1,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 0
    ),
    V2_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 1,
      topic_modest == "concert" ~ 0
    ),
    V3_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 1
    )
  )

# Mean-center the effects-coded variables
control_competition_modest <- control_competition_modest %>%
  mutate(
    V1_prosocial_modest = V1_prosocial_modest - mean(V1_prosocial_modest, na.rm = TRUE),
    V2_prosocial_modest = V2_prosocial_modest - mean(V2_prosocial_modest, na.rm = TRUE),
    V3_prosocial_modest = V3_prosocial_modest - mean(V3_prosocial_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
control_competition_modest <- control_competition_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_control_comp_prosocial <- multinom(signaling_type ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                     data = control_competition_modest)

# Print the summary
summary_modest_model_control_comp_prosocial <- summary(modest_model_control_comp_prosocial)
print(summary_modest_model_control_comp_prosocial)

# Calculate z-scores and p-values
z_scores_modest_model_control_comp_prosocial <- summary_modest_model_control_comp_prosocial$coefficients / summary_modest_model_control_comp_prosocial$standard.errors
p_values_modest_model_control_comp_prosocial <- (1 - pnorm(abs(z_scores_modest_model_control_comp_prosocial))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_control_comp_prosocial)
print("P-values:")
print(p_values_modest_model_control_comp_prosocial)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_control_comp_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_control_comp_prosocial),
  coefficient = summary_modest_model_control_comp_prosocial$coefficients[1,],
  std_error = summary_modest_model_control_comp_prosocial$standard.errors[1,],
  z_score = z_scores_modest_model_control_comp_prosocial[1,],
  p_value = p_values_modest_model_control_comp_prosocial[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_control_comp_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_control_comp_prosocial),
  coefficient = summary_modest_model_control_comp_prosocial$coefficients[2,],
  std_error = summary_modest_model_control_comp_prosocial$standard.errors[2,],
  z_score = z_scores_modest_model_control_comp_prosocial[2,],
  p_value = p_values_modest_model_control_comp_prosocial[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_control_comp_prosocial <- format_results(overt_vs_modest_control_comp_prosocial)
silence_vs_modest_formatted_control_comp_prosocial <- format_results(silence_vs_modest_control_comp_prosocial)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_control_comp_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_control_comp_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):V2 is significant
# Silence vs. Modest Signaling (Reference):Condition and V2 is significant


# Calculate proportion of status signaling posts by condition
proportion_results_control_comp_prosocial_overt <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_control_comp_prosocial_modesty <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_control_comp_prosocial_silence <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_comp_prosocial_overt)
print (proportion_results_control_comp_prosocial_modesty)
print (proportion_results_control_comp_prosocial_silence)

# Overt signaling: Competition: 32% vs. Control: 19%
# Modest signaling: Competition: 47% vs. Control: 43%
# Silence: Competition: 20% vs. Control: 37%

# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
control_competition_modest <- control_competition_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_control_comp_prosocial <- glm(overt_vs_rest ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                         data = control_competition_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_control_comp_prosocial <- summary(overt_vs_rest_model_control_comp_prosocial)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_control_comp_prosocial)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_control_comp_prosocial_results <- tidy(overt_vs_rest_model_control_comp_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_control_comp_prosocial_results)

# Condition is significant (χ² = 4.17, p = 0.041)



# Calculate and display proportions by condition
overt_vs_rest_props_control_comp_prosocial <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_control_comp_prosocial)


# Overt signaling: Control: 20% vs. Competition: 32%

# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
control_competition_modest <- control_competition_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_control_comp_prosocial <- glm(signal_vs_silence ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                             data = control_competition_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_control_comp_prosocial <- summary(signal_vs_silence_model_control_comp_prosocial)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_control_comp_prosocial)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_control_comp_prosocial_results <- tidy(signal_vs_silence_model_control_comp_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_control_comp_prosocial_results)

# Condition is significant (χ² = 8.39, p = 0.004)

# Calculate and display proportions by condition
signal_vs_silence_props_control_comp_prosocial <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_control_comp_prosocial)

# Competition 79%, control 63%

```

### Cooperation vs. competition

```{r}
#| label: Modest signaling analysis: prosocial domain (coop vs. comp)
#| include: false

# Multinomial logistic regression for prosocials domain (coop vs. comp)

cooperation_competition_modest <- cooperation_competition %>%
  filter(topic_modest %in% c("donation", "volunteering", "mentoring", "concert"))

# Recode topic variables using effects coding for conspicuous domain
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(
    V1_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 1,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 0
    ),
    V2_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 1,
      topic_modest == "concert" ~ 0
    ),
    V3_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 1
    )
  )

# Mean-center the effects-coded variables
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(
    V1_prosocial_modest = V1_prosocial_modest - mean(V1_prosocial_modest, na.rm = TRUE),
    V2_prosocial_modest = V2_prosocial_modest - mean(V2_prosocial_modest, na.rm = TRUE),
    V3_prosocial_modest = V3_prosocial_modest - mean(V3_prosocial_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_coop_comp_prosocial <- multinom(signaling_type ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                     data = cooperation_competition_modest)

# Print the summary
summary_modest_model_coop_comp_prosocial <- summary(modest_model_coop_comp_prosocial)
print(summary_modest_model_coop_comp_prosocial)

# Calculate z-scores and p-values
z_scores_modest_model_coop_comp_prosocial <- summary_modest_model_coop_comp_prosocial$coefficients / summary_modest_model_coop_comp_prosocial$standard.errors
p_values_modest_model_coop_comp_prosocial <- (1 - pnorm(abs(z_scores_modest_model_coop_comp_prosocial))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_coop_comp_prosocial)
print("P-values:")
print(p_values_modest_model_coop_comp_prosocial)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_coop_comp_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_coop_comp_prosocial),
  coefficient = summary_modest_model_coop_comp_prosocial$coefficients[1,],
  std_error = summary_modest_model_coop_comp_prosocial$standard.errors[1,],
  z_score = z_scores_modest_model_coop_comp_prosocial[1,],
  p_value = p_values_modest_model_coop_comp_prosocial[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_coop_comp_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_coop_comp_prosocial),
  coefficient = summary_modest_model_coop_comp_prosocial$coefficients[2,],
  std_error = summary_modest_model_coop_comp_prosocial$standard.errors[2,],
  z_score = z_scores_modest_model_coop_comp_prosocial[2,],
  p_value = p_values_modest_model_coop_comp_prosocial[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_coop_comp_prosocial <- format_results(overt_vs_modest_coop_comp_prosocial)
silence_vs_modest_formatted_coop_comp_prosocial <- format_results(silence_vs_modest_coop_comp_prosocial)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_coop_comp_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_coop_comp_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Insignificant
# Silence vs. Modest Signaling (Reference):V1 and V2 are significant



# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_coop_comp_prosocial <- glm(overt_vs_rest ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                         data = cooperation_competition_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_coop_comp_prosocial <- summary(overt_vs_rest_model_coop_comp_prosocial)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_coop_comp_prosocial)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_coop_comp_prosocial_results <- tidy(overt_vs_rest_model_coop_comp_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_coop_comp_prosocial_results)

# All insignificant



# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_coop_comp_prosocial <- glm(signal_vs_silence ~ condition_coded * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                             data = cooperation_competition_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_coop_comp_prosocial <- summary(signal_vs_silence_model_coop_comp_prosocial)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_coop_comp_prosocial)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_coop_comp_prosocial_results <- tidy(signal_vs_silence_model_coop_comp_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_coop_comp_prosocial_results)

# V1 is significant


```

## Competence Domain

### Control vs. Cooperation

```{r}
#| label: Modest signaling analysis: competence domain (coop vs. control)
#| include: false


# Multinomial logistic regression for competence domain (coop vs. control)

control_cooperation_modest <- control_cooperation %>%
  filter(topic_modest %in% c("mba", "tedx", "summit", "award"))

# Recode topic variables using effects coding for conspicuous domain
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(
    V1_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 1,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 0
    ),
    V2_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 1,
      topic_modest == "award" ~ 0
    ),
    V3_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 1
    )
  )

# Mean-center the effects-coded variables
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(
    V1_competence_modest = V1_competence_modest - mean(V1_competence_modest, na.rm = TRUE),
    V2_competence_modest = V2_competence_modest - mean(V2_competence_modest, na.rm = TRUE),
    V3_competence_modest = V3_competence_modest - mean(V3_competence_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_control_coop_competence <- multinom(signaling_type ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                     data = control_cooperation_modest)

# Print the summary
summary_modest_model_control_coop_competence <- summary(modest_model_control_coop_competence)
print(summary_modest_model_control_coop_competence)

# Calculate z-scores and p-values
z_scores_modest_model_control_coop_competence <- summary_modest_model_control_coop_competence$coefficients / summary_modest_model_control_coop_competence$standard.errors
p_values_modest_model_control_coop_competence <- (1 - pnorm(abs(z_scores_modest_model_control_coop_competence))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_control_coop_competence)
print("P-values:")
print(p_values_modest_model_control_coop_competence)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_control_coop_competence <- data.frame(
  term = colnames(z_scores_modest_model_control_coop_competence),
  coefficient = summary_modest_model_control_coop_competence$coefficients[1,],
  std_error = summary_modest_model_control_coop_competence$standard.errors[1,],
  z_score = z_scores_modest_model_control_coop_competence[1,],
  p_value = p_values_modest_model_control_coop_competence[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_control_coop_competence <- data.frame(
  term = colnames(z_scores_modest_model_control_coop_competence),
  coefficient = summary_modest_model_control_coop_competence$coefficients[2,],
  std_error = summary_modest_model_control_coop_competence$standard.errors[2,],
  z_score = z_scores_modest_model_control_coop_competence[2,],
  p_value = p_values_modest_model_control_coop_competence[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_control_coop_competence <- format_results(overt_vs_modest_control_coop_competence)
silence_vs_modest_formatted_control_coop_competence <- format_results(silence_vs_modest_control_coop_competence)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_control_coop_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_control_coop_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Insignificant
# Silence vs. Modest Signaling (Reference): condition_coded:V3_competence_modest is significant





# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_control_coop_competence <- glm(overt_vs_rest ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                         data = control_cooperation_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_control_coop_competence <- summary(overt_vs_rest_model_control_coop_competence)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_control_coop_competence)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_control_coop_competence_results <- tidy(overt_vs_rest_model_control_coop_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_control_coop_competence_results)

# Insignificant




# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
control_cooperation_modest <- control_cooperation_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_control_coop_competence <- glm(signal_vs_silence ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                             data = control_cooperation_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_control_coop_competence <- summary(signal_vs_silence_model_control_coop_competence)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_control_coop_competence)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_control_coop_competence_results <- tidy(signal_vs_silence_model_control_coop_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_control_coop_competence_results)

# Insignificant


```

### Control vs. Competition

```{r}
#| label: Modest signaling analysis: competence domain (comp vs. control)
#| include: false


# Multinomial logistic regression for competence domain (coop vs. control)

control_competition_modest <- control_competition %>%
  filter(topic_modest %in% c("mba", "tedx", "summit", "award"))

# Recode topic variables using effects coding for conspicuous domain
control_competition_modest <- control_competition_modest %>%
  mutate(
    V1_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 1,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 0
    ),
    V2_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 1,
      topic_modest == "award" ~ 0
    ),
    V3_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 1
    )
  )

# Mean-center the effects-coded variables
control_competition_modest <- control_competition_modest %>%
  mutate(
    V1_competence_modest = V1_competence_modest - mean(V1_competence_modest, na.rm = TRUE),
    V2_competence_modest = V2_competence_modest - mean(V2_competence_modest, na.rm = TRUE),
    V3_competence_modest = V3_competence_modest - mean(V3_competence_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
control_competition_modest <- control_competition_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_control_comp_competence <- multinom(signaling_type ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                     data = control_competition_modest)

# Print the summary
summary_modest_model_control_comp_competence <- summary(modest_model_control_comp_competence)
print(summary_modest_model_control_comp_competence)

# Calculate z-scores and p-values
z_scores_modest_model_control_comp_competence <- summary_modest_model_control_comp_competence$coefficients / summary_modest_model_control_comp_competence$standard.errors
p_values_modest_model_control_comp_competence <- (1 - pnorm(abs(z_scores_modest_model_control_comp_competence))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_control_comp_competence)
print("P-values:")
print(p_values_modest_model_control_comp_competence)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_control_comp_competence <- data.frame(
  term = colnames(z_scores_modest_model_control_comp_competence),
  coefficient = summary_modest_model_control_comp_competence$coefficients[1,],
  std_error = summary_modest_model_control_comp_competence$standard.errors[1,],
  z_score = z_scores_modest_model_control_comp_competence[1,],
  p_value = p_values_modest_model_control_comp_competence[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_control_comp_competence <- data.frame(
  term = colnames(z_scores_modest_model_control_comp_competence),
  coefficient = summary_modest_model_control_comp_competence$coefficients[2,],
  std_error = summary_modest_model_control_comp_competence$standard.errors[2,],
  z_score = z_scores_modest_model_control_comp_competence[2,],
  p_value = p_values_modest_model_control_comp_competence[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_control_comp_competence <- format_results(overt_vs_modest_control_comp_competence)
silence_vs_modest_formatted_control_comp_competence <- format_results(silence_vs_modest_control_comp_competence)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_control_comp_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_control_comp_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Insignificant
# Silence vs. Modest Signaling (Reference): Condition is significant

# Calculate proportion of status signaling posts by condition
proportion_results_control_comp_competence_overt <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_control_comp_competence_modesty <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_control_comp_competence_silence <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_control_comp_competence_overt)
print (proportion_results_control_comp_competence_modesty)
print (proportion_results_control_comp_competence_silence)

# Overt signaling: Competition: 37% vs. Control: 25%
# Modest signaling: Competition: 47% vs. Control: 40%
# Silence: Competition: 16% vs. Control: 35%




# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
control_competition_modest <- control_competition_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_control_comp_competence <- glm(overt_vs_rest ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                         data = control_competition_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_control_comp_competence <- summary(overt_vs_rest_model_control_comp_competence)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_control_comp_competence)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_control_comp_competence_results <- tidy(overt_vs_rest_model_control_comp_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_control_comp_competence_results)

# Insignificant




# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
control_competition_modest <- control_competition_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_control_comp_competence <- glm(signal_vs_silence ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                             data = control_competition_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_control_comp_competence <- summary(signal_vs_silence_model_control_comp_competence)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_control_comp_competence)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_control_comp_competence_results <- tidy(signal_vs_silence_model_control_comp_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_control_comp_competence_results)

# Condition is significant (χ² = 9.53, p = 0.002)


# Calculate and display proportions by condition
signal_vs_silence_props_control_comp_competence <- control_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_control_comp_competence)


# Competition 84%, control 65%








```

### Cooperation vs. Competition

```{r}
#| label: Modest signaling analysis: competence domain (coop vs. comp)
#| include: false


# Multinomial logistic regression for competence domain (coop vs. control)

cooperation_competition_modest <- cooperation_competition %>%
  filter(topic_modest %in% c("mba", "tedx", "summit", "award"))

# Recode topic variables using effects coding for conspicuous domain
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(
    V1_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 1,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 0
    ),
    V2_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 1,
      topic_modest == "award" ~ 0
    ),
    V3_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 1
    )
  )

# Mean-center the effects-coded variables
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(
    V1_competence_modest = V1_competence_modest - mean(V1_competence_modest, na.rm = TRUE),
    V2_competence_modest = V2_competence_modest - mean(V2_competence_modest, na.rm = TRUE),
    V3_competence_modest = V3_competence_modest - mean(V3_competence_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2)))

# Run the multinomial logistic regression
modest_model_coop_comp_competence <- multinom(signaling_type ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                     data = cooperation_competition_modest)

# Print the summary
summary_modest_model_coop_comp_competence <- summary(modest_model_coop_comp_competence)
print(summary_modest_model_coop_comp_competence)

# Calculate z-scores and p-values
z_scores_modest_model_coop_comp_competence <- summary_modest_model_coop_comp_competence$coefficients / summary_modest_model_coop_comp_competence$standard.errors
p_values_modest_model_coop_comp_competence <- (1 - pnorm(abs(z_scores_modest_model_coop_comp_competence))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_coop_comp_competence)
print("P-values:")
print(p_values_modest_model_coop_comp_competence)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_coop_comp_competence <- data.frame(
  term = colnames(z_scores_modest_model_coop_comp_competence),
  coefficient = summary_modest_model_coop_comp_competence$coefficients[1,],
  std_error = summary_modest_model_coop_comp_competence$standard.errors[1,],
  z_score = z_scores_modest_model_coop_comp_competence[1,],
  p_value = p_values_modest_model_coop_comp_competence[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_coop_comp_competence <- data.frame(
  term = colnames(z_scores_modest_model_coop_comp_competence),
  coefficient = summary_modest_model_coop_comp_competence$coefficients[2,],
  std_error = summary_modest_model_coop_comp_competence$standard.errors[2,],
  z_score = z_scores_modest_model_coop_comp_competence[2,],
  p_value = p_values_modest_model_coop_comp_competence[2,]
)

  
# Apply formatting
overt_vs_modest_formatted_coop_comp_competence <- format_results(overt_vs_modest_coop_comp_competence)
silence_vs_modest_formatted_coop_comp_competence <- format_results(silence_vs_modest_coop_comp_competence)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_coop_comp_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_coop_comp_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Condition is significant (χ² = 4.34, p = 0.037)
# Silence vs. Modest Signaling (Reference): Insignificant

# Calculate proportion of status signaling posts by condition
proportion_results_coop_comp_competence_overt <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_coop_comp_competence_modesty <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_coop_comp_competence_silence <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_coop_comp_competence_overt)
print (proportion_results_coop_comp_competence_modesty)
print (proportion_results_coop_comp_competence_silence)

# Overt signaling: Competition: 37% vs. Cooperation: 20%
# Modest signaling: Competition: 47% vs. Cooperation: 51%
# Silence: Competition: 16% vs. Cooperation: 28%




# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_coop_comp_competence <- glm(overt_vs_rest ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                         data = cooperation_competition_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_coop_comp_competence <- summary(overt_vs_rest_model_coop_comp_competence)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_coop_comp_competence)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_coop_comp_competence_results <- tidy(overt_vs_rest_model_coop_comp_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_coop_comp_competence_results)

# Condition is significant (χ² = 7.49, p = 0.006)

# Calculate and display proportions by condition
overt_vs_rest_props_coop_comp_competence <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(overt_vs_rest_props_coop_comp_competence)

# Competition 37%, cooperation 20%

# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
cooperation_competition_modest <- cooperation_competition_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_coop_comp_competence <- glm(signal_vs_silence ~ condition_coded * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                             data = cooperation_competition_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_coop_comp_competence <- summary(signal_vs_silence_model_coop_comp_competence)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_coop_comp_competence)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_coop_comp_competence_results <- tidy(signal_vs_silence_model_coop_comp_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_coop_comp_competence_results)

# Condition is significant (χ² = 4.00, p = 0.045)


# Calculate and display proportions by condition
signal_vs_silence_props_coop_comp_competence <- cooperation_competition_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_coop_comp_competence)


# Competition 84%, control 72%








```

# Modesty Analysis (Three pairs of multinomial logistic regressions for each domain)

## Conspicuous Consumption

```{r}
#| label: Modesty analysis: conspicuous domain
#| include: false


# Multinomial logistic regression for conspicuous domain

conspicuous_modest <- replication %>%
  filter(topic_modest %in% c("car", "attire", "food", "travel"))

# Recode topic variables using effects coding for conspicuous domain
conspicuous_modest <- conspicuous_modest %>%
  mutate(
    V1_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 1,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 0
    ),
    V2_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 1,
      topic_modest == "travel" ~ 0
    ),
    V3_conspicuous_modest = case_when(
      topic_modest == "attire" ~ -1,
      topic_modest == "food" ~ 0,
      topic_modest == "car" ~ 0,
      topic_modest == "travel" ~ 1
    )
  )

# Mean-center the effects-coded variables
conspicuous_modest <- conspicuous_modest %>%
  mutate(
    V1_conspicuous_modest = V1_conspicuous_modest - mean(V1_conspicuous_modest, na.rm = TRUE),
    V2_conspicuous_modest = V2_conspicuous_modest - mean(V2_conspicuous_modest, na.rm = TRUE),
    V3_conspicuous_modest = V3_conspicuous_modest - mean(V3_conspicuous_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
conspicuous_modest <- conspicuous_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2))) %>% 
  mutate(condition = factor(condition, levels = c("control", "competition", "cooperation")))

# Run the multinomial logistic regression
modest_model_conspicuous <- multinom(signaling_type ~ condition * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                     data = conspicuous_modest)

# Print the summary
summary_modest_model_conspicuous <- summary(modest_model_conspicuous)
print(summary_modest_model_conspicuous)

# Calculate z-scores and p-values
z_scores_modest_model_conspicuous <- summary_modest_model_conspicuous$coefficients / summary_modest_model_conspicuous$standard.errors
p_values_modest_model_conspicuous <- (1 - pnorm(abs(z_scores_modest_model_conspicuous))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_conspicuous)
print("P-values:")
print(p_values_modest_model_conspicuous)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_conspicuous),
  coefficient = summary_modest_model_conspicuous$coefficients[1,],
  std_error = summary_modest_model_conspicuous$standard.errors[1,],
  z_score = z_scores_modest_model_conspicuous[1,],
  p_value = p_values_modest_model_conspicuous[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_conspicuous <- data.frame(
  term = colnames(z_scores_modest_model_conspicuous),
  coefficient = summary_modest_model_conspicuous$coefficients[2,],
  std_error = summary_modest_model_conspicuous$standard.errors[2,],
  z_score = z_scores_modest_model_conspicuous[2,],
  p_value = p_values_modest_model_conspicuous[2,]
)

# Format the results for easier interpretation
format_results <- function(results_df) {
  results_df %>%
    mutate(
      p_formatted = case_when(
        p_value < 0.001 ~ "p < .001",
        p_value < 0.01 ~ paste0("p = ", format(round(p_value, 3), nsmall = 3)),
        TRUE ~ paste0("p = ", format(round(p_value, 3), nsmall = 3))
      ),
      wald_chisq = z_score^2,
      result_formatted = paste0(
        "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
        ", ", p_formatted
      )
    )}
  
# Apply formatting
overt_vs_modest_formatted_conspicuous <- format_results(overt_vs_modest_conspicuous)
silence_vs_modest_formatted_conspicuous <- format_results(silence_vs_modest_conspicuous)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_conspicuous %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Insignificant
# Silence vs. Modest Signaling (Reference): Significant in the competition condition, χ² = 12.23, p < .001


# Calculate proportion of status signaling posts by condition
proportion_results_conspicuous_overt <- conspicuous_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_conspicuous_modesty <- conspicuous_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_conspicuous_silence <- conspicuous_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )
# Print the results
print(proportion_results_conspicuous_overt)
print (proportion_results_conspicuous_modesty)
print (proportion_results_conspicuous_silence)

# Overt signaling: Control: 21.37% vs. Cooperation: 13.16% vs.Competition: 21.88%
# Modest signaling: Control: 17.95% vs. cooperation: 21.93% vs. Competition: 39.58%
# Here is a shift that cooperation is more likely to indicate modest signaling than overt signaling, while competition is also more likely to indicate modest signaling than overt signaling.




```

# Bar plot to display proportion of signaling types by condition (conspicuous)

```{r}
#| label: Bar plot for conspicuous signaling types
#| include: false

combined_results_conspicuous_signal <- bind_rows(
  proportion_results_conspicuous_overt %>% mutate(signaling_type = "Overt Signaling"),
  proportion_results_conspicuous_modesty %>% mutate(signaling_type = "Modesty"),
  proportion_results_conspicuous_silence %>% mutate(signaling_type = "Silence")
)

# Set the order of the signaling types
combined_results_conspicuous_signal$signaling_type <- factor(
  combined_results_conspicuous_signal$signaling_type,
  levels = c("Overt Signaling", "Modesty", "Silence")
)

combined_conspicuous_signal_plot <- ggplot(combined_results_conspicuous_signal, aes(x = signaling_type, y = percent_signal, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percent_signal)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Use the correct overall average for each condition
  geom_hline(data = overall_proportions_conspicuous_modest, 
             aes(yintercept = percentage, color = condition),
             linetype = "dashed") +
  
  # Add percentage labels for overall averages (slightly above dashed line)
  geom_text(data = overall_proportions_conspicuous_modest,
            aes(x = -Inf,  # Move text to far left
                y = percentage + 2,  # Slightly above dashed line
                label = sprintf("%.1f%%", percentage), 
                color = condition),
            size = 3, fontface = "bold", hjust = 0) +
  
  # Customize appearance
  scale_fill_manual(values = c("control" = "#66C2A5", "competition" = "#FC8D62", "cooperation" = "#8DA0CB"),
                    name = "Condition") +
  scale_color_manual(values = c("control" = "#66C2A5", "competition" = "#FC8D62", "cooperation" = "#8DA0CB"),
                     guide = "none") +  # Hide color legend
  
  
  labs(
    title = "Proportion of Signaling Types by Condition: Conspicuous",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Signaling Type",
    y = "Percentage (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(combined_results_conspicuous_signal$percent_signal*1.1))



print(combined_conspicuous_signal_plot)








```















```{r}
# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
conspicuous_modest <- conspicuous_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_conspicuous <- glm(overt_vs_rest ~ condition * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                         data = conspicuous_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_conspicuous <- summary(overt_vs_rest_model_conspicuous)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_conspicuous)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_conspicuous_results <- tidy(overt_vs_rest_model_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_conspicuous_results)

# All insignificant



# Calculate and display proportions by condition
overt_vs_rest_props_conspicuous <- conspicuous_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_conspicuous)


# Overt signaling: Control: 21.37% vs. Cooperation: 13.16% vs.Competition: 21.88%

# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
conspicuous_modest <- conspicuous_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_conspicuous <- glm(signal_vs_silence ~ condition * (V1_conspicuous_modest + V2_conspicuous_modest + V3_conspicuous_modest), 
                             data = conspicuous_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_conspicuous <- summary(signal_vs_silence_model_conspicuous)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_conspicuous)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_conspicuous_results <- tidy(signal_vs_silence_model_conspicuous) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_conspicuous_results)

# Competiton condition is significant, χ² = 12.65, p < .001

# Calculate and display proportions by condition
signal_vs_silence_props_conspicuous <- conspicuous_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_conspicuous)

# Overt + Modest signaling: 39% (control) and 35% (cooperation) compared with competition (61%)

```































## Prosocial Behavior

```{r}
#| label: Modesty analysis: Prosocial domain
#| include: false


# Multinomial logistic regression for prosocial domain

prosocial_modest <- replication %>%
  filter(topic_modest %in% c("donation", "volunteering", "mentoring", "concert"))

# Recode topic variables using effects coding for conspicuous domain
prosocial_modest <- prosocial_modest %>%
  mutate(
    V1_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 1,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 0
    ),
    V2_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 1,
      topic_modest == "concert" ~ 0
    ),
    V3_prosocial_modest = case_when(
      topic_modest == "donation" ~ -1,
      topic_modest == "volunteering" ~ 0,
      topic_modest == "mentoring" ~ 0,
      topic_modest == "concert" ~ 1
    )
  )

# Mean-center the effects-coded variables
prosocial_modest <- prosocial_modest %>%
  mutate(
    V1_prosocial_modest = V1_prosocial_modest - mean(V1_prosocial_modest, na.rm = TRUE),
    V2_prosocial_modest = V2_prosocial_modest - mean(V2_prosocial_modest, na.rm = TRUE),
    V3_prosocial_modest = V3_prosocial_modest - mean(V3_prosocial_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
prosocial_modest <- prosocial_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2))) %>% 
  mutate(condition = factor(condition, levels = c("control", "competition", "cooperation")))

# Run the multinomial logistic regression
modest_model_prosocial <- multinom(signaling_type ~ condition * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                     data = prosocial_modest)

# Print the summary
summary_modest_model_prosocial <- summary(modest_model_prosocial)
print(summary_modest_model_prosocial)

# Calculate z-scores and p-values
z_scores_modest_model_prosocial <- summary_modest_model_prosocial$coefficients / summary_modest_model_prosocial$standard.errors
p_values_modest_model_prosocial <- (1 - pnorm(abs(z_scores_modest_model_prosocial))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_prosocial)
print("P-values:")
print(p_values_modest_model_prosocial)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_prosocial),
  coefficient = summary_modest_model_prosocial$coefficients[1,],
  std_error = summary_modest_model_prosocial$standard.errors[1,],
  z_score = z_scores_modest_model_prosocial[1,],
  p_value = p_values_modest_model_prosocial[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_prosocial <- data.frame(
  term = colnames(z_scores_modest_model_prosocial),
  coefficient = summary_modest_model_prosocial$coefficients[2,],
  std_error = summary_modest_model_prosocial$standard.errors[2,],
  z_score = z_scores_modest_model_prosocial[2,],
  p_value = p_values_modest_model_prosocial[2,]
)

# Format the results for easier interpretation
format_results <- function(results_df) {
  results_df %>%
    mutate(
      p_formatted = case_when(
        p_value < 0.001 ~ "p < .001",
        p_value < 0.01 ~ paste0("p = ", format(round(p_value, 3), nsmall = 3)),
        TRUE ~ paste0("p = ", format(round(p_value, 3), nsmall = 3))
      ),
      wald_chisq = z_score^2,
      result_formatted = paste0(
        "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
        ", ", p_formatted
      )
    )}
  
# Apply formatting
overt_vs_modest_formatted_prosocial <- format_results(overt_vs_modest_prosocial)
silence_vs_modest_formatted_prosocial <- format_results(silence_vs_modest_prosocial)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_prosocial %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):V3 is significant (χ² = 7.83, p = 0.005)
# Silence vs. Modest Signaling (Reference): Significant in the competition condition, χ² = 5.69, p = 0.017


# Calculate proportion of status signaling posts by condition
proportion_results_prosocial_overt <- prosocial_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_prosocial_modesty <- prosocial_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_prosocial_silence <- prosocial_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

# Print the results
print(proportion_results_prosocial_overt)
print (proportion_results_prosocial_modesty)
print (proportion_results_prosocial_silence)

# Overt signaling: Control: 19.82% vs. Cooperation: 33.33% vs.Competition: 32.41%
# Modest signaling: Control: 43.24% vs. cooperation: 39.64% vs. Competition: 47.22%



# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
prosocial_modest <- prosocial_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_prosocial <- glm(overt_vs_rest ~ condition * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                         data = prosocial_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_prosocial <- summary(overt_vs_rest_model_prosocial)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_prosocial)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_prosocial_results <- tidy(overt_vs_rest_model_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_prosocial_results)

# Competition and cooperation conditions are significant, V2 is significant



# Calculate and display proportions by condition
overt_vs_rest_props_prosocial <- prosocial_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_prosocial)


# Overt signaling: Control: 19.81% vs. Cooperation: 32.41% vs.Competition: 33.33%

# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
prosocial_modest <- prosocial_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_prosocial <- glm(signal_vs_silence ~ condition * (V1_prosocial_modest + V2_prosocial_modest + V3_prosocial_modest), 
                             data = prosocial_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_prosocial <- summary(signal_vs_silence_model_prosocial)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_prosocial)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_prosocial_results <- tidy(signal_vs_silence_model_prosocial) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_prosocial_results)

# Competiton condition is significant, χ² = 8.16, p = 0.004
# Cooperation condition is significant, χ² = 4.61, p = 0.032

# Calculate and display proportions by condition
signal_vs_silence_props_prosocial <- prosocial_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_prosocial)

# Overt + Modest signaling: 63% (control) and 73% (cooperation) compared with competition (80%)

```
# Bar plot to display proportion of signaling types by condition (prosocial)

```{r}
#| label: Bar plot for prosocial signaling types
#| include: false

combined_results_prosocial_signal <- bind_rows(
  proportion_results_prosocial_overt %>% mutate(signaling_type = "Overt Signaling"),
  proportion_results_prosocial_modesty %>% mutate(signaling_type = "Modesty"),
  proportion_results_prosocial_silence %>% mutate(signaling_type = "Silence")
)

# Set the order of the signaling types
combined_results_prosocial_signal$signaling_type <- factor(
  combined_results_prosocial_signal$signaling_type,
  levels = c("Overt Signaling", "Modesty", "Silence")
)

combined_prosocial_signal_plot <- ggplot(combined_results_prosocial_signal, aes(x = signaling_type, y = percent_signal, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percent_signal)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Use the correct overall average for each condition
  geom_hline(data = overall_proportions_prosocial_modest, 
             aes(yintercept = percentage, color = condition),
             linetype = "dashed") +
  
  # Add percentage labels for overall averages (slightly above dashed line)
  geom_text(data = overall_proportions_prosocial_modest,
            aes(x = -Inf,  # Move text to far left
                y = percentage + 2,  # Slightly above dashed line
                label = sprintf("%.1f%%", percentage), 
                color = condition),
            size = 3, fontface = "bold", hjust = 0) +
  
  # Customize appearance
  scale_fill_manual(values = c("control" = "#66C2A5", "competition" = "#FC8D62", "cooperation" = "#8DA0CB"),
                    name = "Condition") +
  scale_color_manual(values = c("control" = "#66C2A5", "competition" = "#FC8D62", "cooperation" = "#8DA0CB"),
                     guide = "none") +  # Hide color legend
  
  
  labs(
    title = "Proportion of Signaling Types by Condition: Prosocial",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Signaling Type",
    y = "Percentage (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  
# Set a manually expanded y-axis limit
  ylim(0, 100)  # Adjust this value as needed, try 80, 90, 100, etc.

print(combined_prosocial_signal_plot)
  












```









## Competence-based Signal

```{r}
#| label: Modesty analysis: Competence domain
#| include: false


# Multinomial logistic regression for competence domain

competence_modest <- replication %>%
  filter(topic_modest %in% c("mba", "tedx", "summit", "award"))

# Recode topic variables using effects coding for conspicuous domain
competence_modest <- competence_modest %>%
  mutate(
    V1_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 1,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 0
    ),
    V2_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 1,
      topic_modest == "award" ~ 0
    ),
    V3_competence_modest = case_when(
      topic_modest == "mba" ~ -1,
      topic_modest == "tedx" ~ 0,
      topic_modest == "summit" ~ 0,
      topic_modest == "award" ~ 1
    )
  )

# Mean-center the effects-coded variables
competence_modest <- competence_modest %>%
  mutate(
    V1_competence_modest = V1_competence_modest - mean(V1_competence_modest, na.rm = TRUE),
    V2_competence_modest = V2_competence_modest - mean(V2_competence_modest, na.rm = TRUE),
    V3_competence_modest = V3_competence_modest - mean(V3_competence_modest, na.rm = TRUE)
  )


# Recode the dependent variable for multinomial logistic regression
competence_modest <- competence_modest %>%
  mutate(signaling_type = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 5) ~ 0,       # Modest signaling (reference level)
    modesty %in% c(3, 6) ~ 2,       # Silence
    TRUE ~ NA_real_
  )) %>%
  # Convert to factor with "0" as reference level
  mutate(signaling_type = factor(signaling_type, levels = c(0, 1, 2))) %>% 
  mutate(condition = factor(condition, levels = c("control", "competition", "cooperation")))

# Run the multinomial logistic regression
modest_model_competence <- multinom(signaling_type ~ condition * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                     data = competence_modest)

# Print the summary
summary_modest_model_competence <- summary(modest_model_competence)
print(summary_modest_model_competence)

# Calculate z-scores and p-values
z_scores_modest_model_competence <- summary_modest_model_competence$coefficients / summary_modest_model_competence$standard.errors
p_values_modest_model_competence <- (1 - pnorm(abs(z_scores_modest_model_competence))) * 2

# Print z-scores and p-values
print("Z-scores:")
print(z_scores_modest_model_competence)
print("P-values:")
print(p_values_modest_model_competence)

# Create results dataframe for the overt signaling vs modest signaling comparison (level 1)
overt_vs_modest_competence <- data.frame(
  term = colnames(z_scores_modest_model_competence),
  coefficient = summary_modest_model_competence$coefficients[1,],
  std_error = summary_modest_model_competence$standard.errors[1,],
  z_score = z_scores_modest_model_competence[1,],
  p_value = p_values_modest_model_competence[1,]
)

# Create results dataframe for the silence vs modest signaling comparison (level 2)
silence_vs_modest_competence <- data.frame(
  term = colnames(z_scores_modest_model_competence),
  coefficient = summary_modest_model_competence$coefficients[2,],
  std_error = summary_modest_model_competence$standard.errors[2,],
  z_score = z_scores_modest_model_competence[2,],
  p_value = p_values_modest_model_competence[2,]
)

# Format the results for easier interpretation
format_results <- function(results_df) {
  results_df %>%
    mutate(
      p_formatted = case_when(
        p_value < 0.001 ~ "p < .001",
        p_value < 0.01 ~ paste0("p = ", format(round(p_value, 3), nsmall = 3)),
        TRUE ~ paste0("p = ", format(round(p_value, 3), nsmall = 3))
      ),
      wald_chisq = z_score^2,
      result_formatted = paste0(
        "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
        ", ", p_formatted
      )
    )}
  
# Apply formatting
overt_vs_modest_formatted_competence <- format_results(overt_vs_modest_competence)
silence_vs_modest_formatted_competence<- format_results(silence_vs_modest_competence)

# Print the results
cat("\nOvert Signaling vs. Modest Signaling (Reference):\n")
print(overt_vs_modest_formatted_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

cat("\nSilence vs. Modest Signaling (Reference):\n")
print(silence_vs_modest_formatted_competence %>% 
      select(term, coefficient, std_error, wald_chisq, p_value, result_formatted))

# Overt Signaling vs. Modest Signaling (Reference):Insignificant
# Silence vs. Modest Signaling (Reference): Significant in the competition condition, χ² = 6.95, p = 0.008


# Calculate proportion of status signaling posts by condition
proportion_results_competence_overt <- competence_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts in each condition
    n_signal = sum(signaling_type == 1, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_competence_modesty <- competence_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 0, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )

proportion_results_competence_silence <- competence_modest %>%
  group_by(condition) %>%
  summarize(
    # Count total responses in each condition
    n_total = n(),
    
    # Count status signal posts (options 1 and 3) in each condition
    n_signal = sum(signaling_type == 2, na.rm = TRUE),
    
    # Calculate proportion
    prop_signal = n_signal / n_total,
    
    # Convert to percentage
    percent_signal = prop_signal * 100,
    
    # Round percentage to integer
    percent_rounded = round(percent_signal)
  )
# Print the results
print(proportion_results_competence_overt)
print (proportion_results_competence_modesty)
print (proportion_results_competence_silence)

# Overt signaling: Control: 24.76% vs. Cooperation: 20.39% vs.Competition: 37.1%
# Modest signaling: Control: 40% vs. cooperation: 51.46% vs. Competition: 46.77%



# Binary logistic regression

# ANALYSIS 1: Overt signaling (bragging) vs. Combined modest signaling and silence

# Step 1: Create the binary dependent variable
competence_modest <- competence_modest %>%
  mutate(overt_vs_rest = case_when(
    modesty %in% c(1, 4) ~ 1,       # Overt signaling
    modesty %in% c(2, 3, 5, 6) ~ 0, # Modest signaling or silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
overt_vs_rest_model_competence <- glm(overt_vs_rest ~ condition * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                         data = competence_modest, 
                         family = binomial(link = "logit"))

# Get the summary
summary_overt_vs_rest_model_competence <- summary(overt_vs_rest_model_competence)
print("ANALYSIS 1: Overt signaling vs. Combined modest signaling and silence")
print(summary_overt_vs_rest_model_competence)

# Create a tidy table with Wald chi-square values
overt_vs_rest_model_competence_results <- tidy(overt_vs_rest_model_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(overt_vs_rest_model_competence_results)

# All insignificant



# Calculate and display proportions by condition
overt_vs_rest_props_competence <- competence_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_overt = sum(overt_vs_rest == 1, na.rm = TRUE),
    prop_overt = n_overt / n,
    percent_overt = prop_overt * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 1:")
print(overt_vs_rest_props_competence)


# Overt signaling: Control: 24.76% vs. Cooperation: 20.39% vs.Competition: 37.1%

# ANALYSIS 2: Combined overt and modest signaling vs. Silence
# Step 1: Create the binary dependent variable
competence_modest <- competence_modest %>%
  mutate(signal_vs_silence = case_when(
    modesty %in% c(1, 2, 4, 5) ~ 1, # Overt or modest signaling
    modesty %in% c(3, 6) ~ 0,       # Silence
    TRUE ~ NA_real_
  ))

# Step 2: Run the binary logistic regression
signal_vs_silence_model_competence <- glm(signal_vs_silence ~ condition * (V1_competence_modest + V2_competence_modest + V3_competence_modest), 
                             data = competence_modest, 
                             family = binomial(link = "logit"))

# Get the summary
summary_signal_vs_silence_model_competence <- summary(signal_vs_silence_model_competence)
print("ANALYSIS 2: Signaling vs. silence")
print(summary_signal_vs_silence_model_competence)

# Create a tidy table with Wald chi-square values
signal_vs_silence_model_competence_results <- tidy(signal_vs_silence_model_competence) %>%
  mutate(
    wald_chisq = statistic^2,
    p_value = p.value,
    p_formatted = case_when(
      p.value < 0.001 ~ "p < .001",
      p.value < 0.01 ~ paste0("p = ", format(round(p.value, 3), nsmall = 3)),
      TRUE ~ paste0("p = ", format(round(p.value, 3), nsmall = 3))
    ),
    result_formatted = paste0(
      "χ² = ", format(round(wald_chisq, 2), nsmall = 2), 
      ", ", p_formatted
    )
  ) %>%
  select(term, estimate, std.error, wald_chisq, p_value, result_formatted)

print(signal_vs_silence_model_competence_results)

# Competiton condition is significant, χ² = 9.77, p = 0.002


# Calculate and display proportions by condition
signal_vs_silence_props_competence <- competence_modest %>%
  group_by(condition) %>%
  summarize(
    n = n(),
    n_signal = sum(signal_vs_silence == 1, na.rm = TRUE),
    prop_signal = n_signal / n,
    percent_signal = prop_signal * 100,
    .groups = "drop"
  )
print("Proportions for Analysis 2:")
print(signal_vs_silence_props_competence)

# Overt + Modest signaling: 65% (control) and 72% (cooperation) compared with competition (84%)

```


# Bar plot to display proportion of signaling types by condition (prosocial)

```{r}
#| label: Bar plot for competence signaling types
#| include: false

combined_results_competence_signal <- bind_rows(
  proportion_results_competence_overt %>% mutate(signaling_type = "Overt Signaling"),
  proportion_results_competence_modesty %>% mutate(signaling_type = "Modesty"),
  proportion_results_competence_silence %>% mutate(signaling_type = "Silence")
)

# Set the order of the signaling types
combined_results_competence_signal$signaling_type <- factor(
  combined_results_competence_signal$signaling_type,
  levels = c("Overt Signaling", "Modesty", "Silence")
)

# Create the bar plot
combined_competence_signal_plot <- ggplot(combined_results_competence_signal, aes(x = signaling_type, y = percent_signal, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percent_signal)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Use the correct overall average for each condition
  geom_hline(data = overall_proportions_competence_modest, 
             aes(yintercept = percentage, color = condition),
             linetype = "dashed") +
  
  # Add percentage labels for overall averages (slightly above dashed line)
  geom_text(data = overall_proportions_competence_modest,
            aes(x = -Inf,  # Move text to far left
                y = percentage + 2,  # Slightly above dashed line
                label = sprintf("%.1f%%", percentage), 
                color = condition),
            size = 3, fontface = "bold", hjust = 0) +
  
  # Customize appearance
  scale_fill_manual(values = c("control" = "#66C2A5", "competition" = "#FC8D62", "cooperation" = "#8DA0CB"),
                    name = "Condition") +
  scale_color_manual(values = c("control" = "#66C2A5", "competition" = "#FC8D62", "cooperation" = "#8DA0CB"),
                     guide = "none") +  # Hide color legend
  
  
  labs(
    title = "Proportion of Signaling Types by Condition: Competence",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Signaling Type",
    y = "Percentage (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  
# Set a manually expanded y-axis limit
  ylim(0, 100)  # Adjust this value as needed, try 80, 90, 100, etc.

print(combined_competence_signal_plot)











```
























# Bar plots for each domain (compared with posts without modesty options)

## Conspicuous Consumption

```{r}
#| label: Create bar plot for proportion comparison (conspicuous-modest)
#| include: true

# Calculate overall proportion of signaling
overall_proportions_conspicuous_modest <- conspicuous_modest %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_conspicuous = sum(signaling_type %in% c(0, 1), na.rm = TRUE),
    proportion = n_conspicuous / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

overall_proportions_conspicuous_modest$condition <- factor(
  overall_proportions_conspicuous_modest$condition,
  levels = c("competition", "control", "cooperation")
)

# Calculate proportions by condition and topic
proportion_by_condition_topic_conspicuous_modest <- conspicuous_modest %>%
  group_by(condition, topic_modest) %>%
  summarize(
    n_total = n(),
    n_conspicuous = sum(signaling_type %in% c(0,1), na.rm = TRUE),
    proportion = n_conspicuous / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

# Make sure condition is ordered nicely for the plot
proportion_by_condition_topic_conspicuous_modest$condition <- factor(
  proportion_by_condition_topic_conspicuous_modest$condition,
  levels = c("competition", "control", "cooperation")
)

# Create the bar plot for overall
overall_plot_conspicuous_modest <- ggplot(overall_proportions_conspicuous_modest, aes(x = condition, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", width = 0.6) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            vjust = -0.5, size = 4.5) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  
  labs(
    title = "Overall Proportion Choosing Status Signaling in Conspicuous Domain by Condition",
    x = "",
    y = "Percentage Choosing Status Signaling Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12, face = "bold"),
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    axis.title.y = element_text(face = "bold", size = 9),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 10)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(overall_proportions_conspicuous_modest$percentage) * 1.15)

print (overall_plot_conspicuous_modest)

# Create the bar plot for each topic
ggplot(proportion_by_condition_topic_conspicuous_modest, aes(x = topic_modest, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Add overall average line for each condition
  geom_hline(data = proportion_by_condition_topic_conspicuous_modest %>% 
               group_by(condition) %>% 
               summarize(avg_percentage = mean(percentage)),
             aes(yintercept = avg_percentage, color = condition),
             linetype = "dashed") +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "Proportion Choosing Status Signaling by Condition and Topic",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Topic",
    y = "Percentage Choosing Status Signaling Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_conspicuous_modest$percentage) * 1.1)





```

## Prosocial

```{r}
#| label: Create bar plot for proportion comparison (prosocial-modest)
#| include: true

# Calculate overall proportion of signaling
overall_proportions_prosocial_modest <- prosocial_modest %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_prosocial = sum(signaling_type %in% c(0, 1), na.rm = TRUE),
    proportion = n_prosocial / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

overall_proportions_prosocial_modest$condition <- factor(
  overall_proportions_prosocial_modest$condition,
  levels = c("competition", "control", "cooperation")
)

# Calculate proportions by condition and topic
proportion_by_condition_topic_prosocial_modest <- prosocial_modest %>%
  group_by(condition, topic_modest) %>%
  summarize(
    n_total = n(),
    n_prosocial = sum(signaling_type %in% c(0,1), na.rm = TRUE),
    proportion = n_prosocial / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

# Make sure condition is ordered nicely for the plot
proportion_by_condition_topic_prosocial_modest$condition <- factor(
  proportion_by_condition_topic_prosocial_modest$condition,
  levels = c("competition", "control", "cooperation")
)

# Create the bar plot for overall
overall_plot_prosocial_modest <- ggplot(overall_proportions_prosocial_modest, aes(x = condition, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", width = 0.6) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            vjust = -0.5, size = 4.5) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  
  labs(
    title = "Overall Proportion Choosing Status Signaling in Prosocial Domain by Condition",
    x = "",
    y = "Percentage Choosing Status Signaling Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12, face = "bold"),
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    axis.title.y = element_text(face = "bold", size = 9),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 10)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(overall_proportions_prosocial_modest$percentage) * 1.15)

print (overall_plot_prosocial_modest)

# Create the bar plot for each topic
ggplot(proportion_by_condition_topic_prosocial_modest, aes(x = topic_modest, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Add overall average line for each condition
  geom_hline(data = proportion_by_condition_topic_prosocial_modest %>% 
               group_by(condition) %>% 
               summarize(avg_percentage = mean(percentage)),
             aes(yintercept = avg_percentage, color = condition),
             linetype = "dashed") +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "Proportion Choosing Status Signaling by Condition and Topic",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Topic",
    y = "Percentage Choosing Status Signaling Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_prosocial_modest$percentage) * 1.1)





```

## Competence

```{r}
#| label: Create bar plot for proportion comparison (competence-modest)
#| include: true

# Calculate overall proportion of signaling
overall_proportions_competence_modest <- competence_modest %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_competence = sum(signaling_type %in% c(0, 1), na.rm = TRUE),
    proportion = n_competence / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

overall_proportions_competence_modest$condition <- factor(
  overall_proportions_competence_modest$condition,
  levels = c("competition", "control", "cooperation")
)

# Calculate proportions by condition and topic
proportion_by_condition_topic_competence_modest <- competence_modest %>%
  group_by(condition, topic_modest) %>%
  summarize(
    n_total = n(),
    n_competence = sum(signaling_type %in% c(0,1), na.rm = TRUE),
    proportion = n_competence / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

# Make sure condition is ordered nicely for the plot
proportion_by_condition_topic_competence_modest$condition <- factor(
  proportion_by_condition_topic_competence_modest$condition,
  levels = c("competition", "control", "cooperation")
)

# Create the bar plot for overall
overall_plot_competence_modest <- ggplot(overall_proportions_competence_modest, aes(x = condition, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", width = 0.6) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            vjust = -0.5, size = 4.5) +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  
  labs(
    title = "Overall Proportion Choosing Status Signaling in Competence Domain by Condition",
    x = "",
    y = "Percentage Choosing Status Signaling Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12, face = "bold"),
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    axis.title.y = element_text(face = "bold", size = 9),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 10)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(overall_proportions_competence_modest$percentage) * 1.15)

print (overall_plot_competence_modest)

# Create the bar plot for each topic
ggplot(proportion_by_condition_topic_competence_modest, aes(x = topic_modest, y = percentage, fill = condition)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  
  # Add percentage labels on top of each bar
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.8), 
            vjust = -0.5, size = 3) +
  
  # Add overall average line for each condition
  geom_hline(data = proportion_by_condition_topic_competence_modest %>% 
               group_by(condition) %>% 
               summarize(avg_percentage = mean(percentage)),
             aes(yintercept = avg_percentage, color = condition),
             linetype = "dashed") +
  
  # Customize appearance
  scale_fill_brewer(palette = "Set2", name = "Condition") +
  scale_color_brewer(palette = "Set2", guide = "none") +
  
  labs(
    title = "Proportion Choosing Status Signaling by Condition and Topic",
    subtitle = "Comparing control, competition, and cooperation conditions",
    x = "Topic",
    y = "Percentage Choosing Status Signaling Posts (%)"
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    legend.position = "bottom",
    panel.grid.major.x = element_blank(),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  ) +
  
  # Set reasonable y-axis limits
  ylim(0, max(proportion_by_condition_topic_competence_modest$percentage) * 1.1)





```






# Display Status Signaling Proportion Change from Original Block to Modesty Block

# Original Block: Status Signaling to Modesty Block: Overt + Modesty Signalings


## Conspicuous Domain Shift

```{r}
#| label: Proportion change in status signaling (conspicuous)
#| include: false

# Control: 36.8% Status signal & 63.2 % Silence --> 39.3% Status signal & 60.7% Silence
# Competition: 47.9% Status signal & 52.1% Silence --> 61.5% Status signal & 38.5% Silence
# Cooperation: 33.3% Status signal & 66.7% Silence --> 35.1% Status signal & 64.9% Silence

# Analysis to show if the proportions of status signaling changed from the original block to the modesty block is significant

# Get list of participant IDs from conspicuous_modest dataset
participants_in_modest_conspicuous <- conspicuous_modest %>%
  distinct(ID)  # Assuming there's a participant_id column

# Calculate proportions for these participants in the initial block
overall_proportions_conspicuous <- replication %>%
  # Only include participants who appear in the conspicuous_modest dataset
  semi_join(participants_in_modest_conspicuous, by = "ID") %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_conspicuous = sum(conspicuous %in% c(1, 3), na.rm = TRUE),
    proportion = n_conspicuous / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )

# Load required package
install.packages("prop.test")
library(prop.test)

# For each condition, do a proportion test between initial and modesty blocks
conditions <- unique(replication$condition)

for (cond in conditions) {
  # Get data for this condition from initial block
  initial <- overall_proportions_conspicuous %>% 
    filter(condition == cond)
  
  # Get data for this condition from modesty block
  modesty <- overall_proportions_conspicuous_modest %>% 
    filter(condition == cond)
  
  # Perform 2-sample proportion test
  test_result_conspicuous <- prop.test(
    x = c(initial$n_conspicuous, modesty$n_conspicuous),
    n = c(initial$n_total, modesty$n_total)
  )
  
  # Print results
  cat("\nCondition:", cond, "\n")
  cat("Initial proportion:", initial$proportion, "\n")
  cat("Modesty proportion:", modesty$proportion, "\n")
  cat("Difference:", modesty$proportion - initial$proportion, "\n")
  print(test_result_conspicuous)
}




# Effect size
library(effectsize)  # For Cohen's h

# Calculate effect sizes for each condition
effect_sizes <- data.frame()

for (cond in conditions) {
  # Get data for this condition from initial block
  initial <- overall_proportions_conspicuous %>% 
    filter(condition == cond)
  
  # Get data for this condition from modesty block
  modesty <- overall_proportions_conspicuous_modest %>% 
    filter(condition == cond)
  
  # Calculate effect sizes
  
  # 1. Risk difference (simple difference in proportions)
  risk_diff <- modesty$proportion - initial$proportion
  
  # 2. Cohen's h
  cohens_h <- 2 * (asin(sqrt(modesty$proportion)) - asin(sqrt(initial$proportion)))
  
  # 3. Risk ratio
  risk_ratio <- modesty$proportion / initial$proportion
  
  # 4. Odds ratio
  odds_initial <- initial$proportion / (1 - initial$proportion)
  odds_modesty <- modesty$proportion / (1 - modesty$proportion)
  odds_ratio <- odds_modesty / odds_initial
  
  # Add to data frame
  effect_sizes <- rbind(effect_sizes, data.frame(
    condition = cond,
    initial_prop = initial$proportion,
    modesty_prop = modesty$proportion,
    risk_difference = risk_diff,
    cohens_h = cohens_h,
    risk_ratio = risk_ratio,
    odds_ratio = odds_ratio
  ))
}

# Print the effect sizes
print(effect_sizes)


# Competition: X-squared = 3.0266, df = 1, p-value = 0.08191, h = 0.27 (small effect), marginally significant
# Control: X-squared = 0.07253, df = 1, p-value = 0.7877, h = 0.05, insignificant
# Cooperation: X-squared = 0.019487, df = 1, p-value = 0.889, h = 0.04, insignificant









# Generate Sankey diagram for the conspicuous domain
install.packages("networkD3")
library(networkD3)

create_status_signal_sankey <- function(condition_name) {
  # Get proportions for initial block
  initial_data <- replication %>%
    filter(condition == condition_name) %>%
    summarize(
      total = n(),
      n_signal = sum(conspicuous %in% c(1, 3), na.rm = TRUE),
      n_silence = total - n_signal
    )
  
  # Get proportions for modesty block
  modesty_data <- conspicuous_modest %>%
    filter(condition == condition_name) %>%
    summarize(
      total = n(),
      n_signal = sum(signaling_type %in% c(0, 1), na.rm = TRUE), # Combining overt and modesty
      n_silence = sum(signaling_type == 2, na.rm = TRUE)
    )
  
  # Calculate percentages for labeling
  init_signal_pct <- round(initial_data$n_signal / initial_data$total * 100)
  init_silence_pct <- round(initial_data$n_silence / initial_data$total * 100)
  mod_signal_pct <- round(modesty_data$n_signal / modesty_data$total * 100)
  mod_silence_pct <- round(modesty_data$n_silence / modesty_data$total * 100)
  
  # Create nodes dataframe with percentages
  nodes <- data.frame(
    name = c(
      paste0("Initial: Status Signal (", init_signal_pct, "%)"), 
      paste0("Initial: Silence (", init_silence_pct, "%)"), 
      paste0("Modesty: Status Signal (", mod_signal_pct, "%)"), 
      paste0("Modesty: Silence (", mod_silence_pct, "%)")
    )
  )
  
  # Calculate proportions for the modesty block
  prop_to_signal <- modesty_data$n_signal / modesty_data$total
  prop_to_silence <- modesty_data$n_silence / modesty_data$total
  
  # Create links dataframe with estimated flows
  links <- data.frame(
    source = c(0, 0, 1, 1),  # 0 = "Initial: Status Signal", 1 = "Initial: Silence"
    target = c(2, 3, 2, 3),  # 2 = "Modesty: Status Signal", 3 = "Modesty: Silence"
    value = c(
      prop_to_signal * initial_data$n_signal,   # Initial Signal → Modesty Signal
      prop_to_silence * initial_data$n_signal,  # Initial Signal → Modesty Silence
      prop_to_signal * initial_data$n_silence,  # Initial Silence → Modesty Signal
      prop_to_silence * initial_data$n_silence  # Initial Silence → Modesty Silence
    )
  )
  
  # Create custom colors - using a nice color palette
  my_color <- 'd3.scaleOrdinal().range(["#3366CC", "#DC3912", "#6633CC", "#FF9900"])'

 # Create the Sankey diagram
sankey <- sankeyNetwork(
  Links = links, 
  Nodes = nodes,
  Source = "source", 
  Target = "target",
  Value = "value", 
  NodeID = "name",
  sinksRight = TRUE,
  nodeWidth = 30,
  nodePadding = 20,
  margin = list(top = 50, right = 20, bottom = 20, left = 20), # Increased top margin
  fontSize = 14,
  colourScale = my_color
)

# Add title using htmlwidgets with guaranteed centering
sankey <- htmlwidgets::onRender(
  sankey,
  sprintf('function(el, x) {
    // Wait for the SVG to be fully rendered
    setTimeout(function() {
      var container = d3.select(el);
      var svg = container.select("svg");
      var width = parseInt(svg.style("width"));
      
      // Remove any existing title to avoid duplicates
      svg.selectAll(".sankey-title").remove();
      
      // Add centered title
      svg.append("text")
        .attr("class", "sankey-title")
        .attr("x", width / 2)
        .attr("y", 25)
        .attr("text-anchor", "middle")
        .style("font-size", "16px")
        .style("font-weight", "bold")
        .text("Status Signaling Shift for %s Condition");
        
      console.log("Title added at position: " + (width/2));
    }, 500); // Wait 500ms for render to complete
  }', condition_name)
)
  
  return(sankey)
}

# Get unique conditions
conditions <- unique(replication$condition)

# Create and display Sankey diagrams for each condition
for (cond in conditions) {
  cat("\nCondition:", cond, "\n")
  sankey_plot <- create_status_signal_sankey(cond)
  print(sankey_plot)
}

```


## Prosocial Domain Shift

```{r}
#| label: Proportion change in status signaling (prosocial)
#| include: false

# Control: 41.4% Status signal & 58.6% Silence --> 63.1% Status signal & 36.9% Silence
# Competition: 66.7% Status signal & 33.3% Silence --> 79.6% Status signal & 20.4% Silence
# Cooperation: 57.7% Status signal & 42.3% Silence --> 73.0% Status signal & 27.0% Silence

# Analysis to show if the proportions of status signaling changed from the original block to the modesty block is significant

# Get list of participant IDs from prosocial_modest dataset
participants_in_modest_prosocial <- prosocial_modest %>%
  distinct(ID)  # Assuming there's a participant_id column

# Calculate proportions for these participants in the initial block
overall_proportions_prosocial <- replication %>%
  # Only include participants who appear in the conspicuous_modest dataset
  semi_join(participants_in_modest_prosocial, by = "ID") %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_prosocial = sum(prosocial %in% c(1, 3), na.rm = TRUE),
    proportion = n_prosocial / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )



# For each condition, do a proportion test between initial and modesty blocks
conditions <- unique(replication$condition)

for (cond in conditions) {
  # Get data for this condition from initial block
  initial <- overall_proportions_prosocial %>% 
    filter(condition == cond)
  
  # Get data for this condition from modesty block
  modesty <- overall_proportions_prosocial_modest %>% 
    filter(condition == cond)
  
  # Perform 2-sample proportion test
  test_result_prosocial <- prop.test(
    x = c(initial$n_prosocial, modesty$n_prosocial),
    n = c(initial$n_total, modesty$n_total)
  )
  
  # Print results
  cat("\nCondition:", cond, "\n")
  cat("Initial proportion:", initial$proportion, "\n")
  cat("Modesty proportion:", modesty$proportion, "\n")
  cat("Difference:", modesty$proportion - initial$proportion, "\n")
  print(test_result_prosocial)
}




# Effect size
library(effectsize)  # For Cohen's h

# Calculate effect sizes for each condition
effect_sizes <- data.frame()

for (cond in conditions) {
  # Get data for this condition from initial block
  initial <- overall_proportions_prosocial %>% 
    filter(condition == cond)
  
  # Get data for this condition from modesty block
  modesty <- overall_proportions_prosocial_modest %>% 
    filter(condition == cond)
  
  # Calculate effect sizes
  
  # 1. Risk difference (simple difference in proportions)
  risk_diff <- modesty$proportion - initial$proportion
  
  # 2. Cohen's h
  cohens_h <- 2 * (asin(sqrt(modesty$proportion)) - asin(sqrt(initial$proportion)))
  
  # 3. Risk ratio
  risk_ratio <- modesty$proportion / initial$proportion
  
  # 4. Odds ratio
  odds_initial <- initial$proportion / (1 - initial$proportion)
  odds_modesty <- modesty$proportion / (1 - modesty$proportion)
  odds_ratio <- odds_modesty / odds_initial
  
  # Add to data frame
  effect_sizes <- rbind(effect_sizes, data.frame(
    condition = cond,
    initial_prop = initial$proportion,
    modesty_prop = modesty$proportion,
    risk_difference = risk_diff,
    cohens_h = cohens_h,
    risk_ratio = risk_ratio,
    odds_ratio = odds_ratio
  ))
}

# Print the effect sizes
print(effect_sizes)


# Competition: X-squared = 3.9834, df = 1, p-value = 0.04595, h = 0.29 (small effect),  significant but approach the calibration
# Control: X-squared = 9.5509, df = 1, p-value = 0.001999, h = 0.44 (small to medium effect), highly significant (i think it should be explained by ceiling effect of cooperation)
# Cooperation: X-squared = 5.0902, df = 1, p-value = 0.02406, h = 0.32 (small effect), significant (also talk about the ceiling effect)



```


## Competence Domain Shift

```{r}
#| label: Proportion change in status signaling (competence)
#| include: false

# Control: 40% Status signal & 60% Silence --> 64.8% Status signal & 35.2% Silence
# Competition: 71.5% Status signal & 28.5% Silence --> 83.7% Status signal & 16.3% Silence
# Cooperation: 47.6% Status signal & 52.4% Silence --> 71.8% Status signal & 28.2% Silence

# Analysis to show if the proportions of status signaling changed from the original block to the modesty block is significant

# Get list of participant IDs from competence_modest dataset
participants_in_modest_competence <- competence_modest %>%
  distinct(ID)  # Assuming there's a participant_id column

# Calculate proportions for these participants in the initial block
overall_proportions_competence <- replication %>%
  # Only include participants who appear in the competence_modest dataset
  semi_join(participants_in_modest_competence, by = "ID") %>%
  group_by(condition) %>%
  summarize(
    n_total = n(),
    n_competence = sum(competence %in% c(1, 3), na.rm = TRUE),
    proportion = n_competence / n_total,
    percentage = proportion * 100,
    .groups = "drop"
  )



# For each condition, do a proportion test between initial and modesty blocks
conditions <- unique(replication$condition)

for (cond in conditions) {
  # Get data for this condition from initial block
  initial <- overall_proportions_competence %>% 
    filter(condition == cond)
  
  # Get data for this condition from modesty block
  modesty <- overall_proportions_competence_modest %>% 
    filter(condition == cond)
  
  # Perform 2-sample proportion test
  test_result_competence <- prop.test(
    x = c(initial$n_competence, modesty$n_competence),
    n = c(initial$n_total, modesty$n_total)
  )
  
  # Print results
  cat("\nCondition:", cond, "\n")
  cat("Initial proportion:", initial$proportion, "\n")
  cat("Modesty proportion:", modesty$proportion, "\n")
  cat("Difference:", modesty$proportion - initial$proportion, "\n")
  print(test_result_competence)
}




# Effect size
library(effectsize)  # For Cohen's h

# Calculate effect sizes for each condition
effect_sizes <- data.frame()

for (cond in conditions) {
  # Get data for this condition from initial block
  initial <- overall_proportions_competence %>% 
    filter(condition == cond)
  
  # Get data for this condition from modesty block
  modesty <- overall_proportions_competence_modest %>% 
    filter(condition == cond)
  
  # Calculate effect sizes
  
  # 1. Risk difference (simple difference in proportions)
  risk_diff <- modesty$proportion - initial$proportion
  
  # 2. Cohen's h
  cohens_h <- 2 * (asin(sqrt(modesty$proportion)) - asin(sqrt(initial$proportion)))
  
  # 3. Risk ratio
  risk_ratio <- modesty$proportion / initial$proportion
  
  # 4. Odds ratio
  odds_initial <- initial$proportion / (1 - initial$proportion)
  odds_modesty <- modesty$proportion / (1 - modesty$proportion)
  odds_ratio <- odds_modesty / odds_initial
  
  # Add to data frame
  effect_sizes <- rbind(effect_sizes, data.frame(
    condition = cond,
    initial_prop = initial$proportion,
    modesty_prop = modesty$proportion,
    risk_difference = risk_diff,
    cohens_h = cohens_h,
    risk_ratio = risk_ratio,
    odds_ratio = odds_ratio
  ))
}

# Print the effect sizes
print(effect_sizes)


# Competition: X-squared = 4.5898, df = 1, p-value = 0.03216, h = 0.30 (small effect),  significant
# Control: X-squared = 11.932, df = 1, p-value = 0.0005518, h = 0.50 (medium effect), highly significant (i think it should be explained by ceiling effect of competition)
# Cooperation: X-squared = 11.623, df = 1, p-value = 0.0006515, h = 0.50 (medium effect), significant





```













